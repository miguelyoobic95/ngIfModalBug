/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  AsyncValidator,
  IActionBar,
  IActionSheet,
  IActionSheetButton,
  IAlertEntry,
  IAnimationProp,
  IChartData,
  IChartOptions,
  IChatMessage,
  IContextMenuEntry,
  IFilterGroup,
  IGridSearch,
  IItemRanking,
  ILanguage,
  ILoginDetails,
  IMapEntry,
  IMarker,
  IMarkerColor,
  IModalEntry,
  IPosition,
  IRadioGroupEntry,
  ITagEntry,
  IVerticalMenuEntry,
  IVerticalMenuItem,
  Validator,
  ValidatorEntry,
} from '@shared/interfaces';
import {
  EventEmitter,
} from '@stencil/core';
import {
  FabButtonEntry,
} from './components/core/yoo-fab-button/yoo-fab-button';

declare global {

  namespace StencilComponents {
    interface YooLanguageSelector {
      'isMobile': boolean;
      'languages': ILanguage[];
    }
  }

  interface HTMLYooLanguageSelectorElement extends StencilComponents.YooLanguageSelector, HTMLStencilElement {}

  var HTMLYooLanguageSelectorElement: {
    prototype: HTMLYooLanguageSelectorElement;
    new (): HTMLYooLanguageSelectorElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-language-selector': HTMLYooLanguageSelectorElement;
  }
  interface ElementTagNameMap {
    'yoo-language-selector': HTMLYooLanguageSelectorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-language-selector': JSXElements.YooLanguageSelectorAttributes;
    }
  }
  namespace JSXElements {
    export interface YooLanguageSelectorAttributes extends HTMLAttributes {
      'isMobile'?: boolean;
      'languages'?: ILanguage[];
      'onLanguageSelected'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooLogin {
      'backgroundColor': string;
      'backgroundSrc': string;
      'buttonClass': string;
      'currentLanguage': string;
      'error': string;
      'forgotPasswordText': string;
      'languages': ILanguage[];
      'leftPanelFooterText': string;
      'leftPanelHeaderIcon': string;
      'loading': boolean;
      'rememberMeText': string;
      'rightPanelFooterIcon': string;
      'rightPanelFooterText': string;
      'rightPanelTitleIcon': string;
      'rightPanelTitleText': string;
    }
  }

  interface HTMLYooLoginElement extends StencilComponents.YooLogin, HTMLStencilElement {}

  var HTMLYooLoginElement: {
    prototype: HTMLYooLoginElement;
    new (): HTMLYooLoginElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-login': HTMLYooLoginElement;
  }
  interface ElementTagNameMap {
    'yoo-login': HTMLYooLoginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-login': JSXElements.YooLoginAttributes;
    }
  }
  namespace JSXElements {
    export interface YooLoginAttributes extends HTMLAttributes {
      'backgroundColor'?: string;
      'backgroundSrc'?: string;
      'buttonClass'?: string;
      'currentLanguage'?: string;
      'error'?: string;
      'forgotPasswordText'?: string;
      'languages'?: ILanguage[];
      'leftPanelFooterText'?: string;
      'leftPanelHeaderIcon'?: string;
      'loading'?: boolean;
      'onDoLogin'?: (event: CustomEvent<ILoginDetails>) => void;
      'onLanguageSelectedParent'?: (event: CustomEvent<string>) => void;
      'onPasswordResetRequested'?: (event: CustomEvent<string>) => void;
      'onRememberMeSelected'?: (event: CustomEvent<boolean>) => void;
      'rememberMeText'?: string;
      'rightPanelFooterIcon'?: string;
      'rightPanelFooterText'?: string;
      'rightPanelTitleIcon'?: string;
      'rightPanelTitleText'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooChartJs {
      'data': IChartData;
      'options': IChartOptions;
      'type': string;
    }
  }

  interface HTMLYooChartJsElement extends StencilComponents.YooChartJs, HTMLStencilElement {}

  var HTMLYooChartJsElement: {
    prototype: HTMLYooChartJsElement;
    new (): HTMLYooChartJsElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-chart-js': HTMLYooChartJsElement;
  }
  interface ElementTagNameMap {
    'yoo-chart-js': HTMLYooChartJsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-chart-js': JSXElements.YooChartJsAttributes;
    }
  }
  namespace JSXElements {
    export interface YooChartJsAttributes extends HTMLAttributes {
      'data'?: IChartData;
      'options'?: IChartOptions;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooChart {
      'options': any;
    }
  }

  interface HTMLYooChartElement extends StencilComponents.YooChart, HTMLStencilElement {}

  var HTMLYooChartElement: {
    prototype: HTMLYooChartElement;
    new (): HTMLYooChartElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-chart': HTMLYooChartElement;
  }
  interface ElementTagNameMap {
    'yoo-chart': HTMLYooChartElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-chart': JSXElements.YooChartAttributes;
    }
  }
  namespace JSXElements {
    export interface YooChartAttributes extends HTMLAttributes {
      'options'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooAccordion {
      'allowMultipleSelection': boolean;
      'titles': string[];
    }
  }

  interface HTMLYooAccordionElement extends StencilComponents.YooAccordion, HTMLStencilElement {}

  var HTMLYooAccordionElement: {
    prototype: HTMLYooAccordionElement;
    new (): HTMLYooAccordionElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-accordion': HTMLYooAccordionElement;
  }
  interface ElementTagNameMap {
    'yoo-accordion': HTMLYooAccordionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-accordion': JSXElements.YooAccordionAttributes;
    }
  }
  namespace JSXElements {
    export interface YooAccordionAttributes extends HTMLAttributes {
      'allowMultipleSelection'?: boolean;
      'onAccordionSelected'?: (event: CustomEvent<number>) => void;
      'titles'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooActionSheet {
      'buttons': IActionSheetButton[];
      'heading': string;
    }
  }

  interface HTMLYooActionSheetElement extends StencilComponents.YooActionSheet, HTMLStencilElement {}

  var HTMLYooActionSheetElement: {
    prototype: HTMLYooActionSheetElement;
    new (): HTMLYooActionSheetElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-action-sheet': HTMLYooActionSheetElement;
  }
  interface ElementTagNameMap {
    'yoo-action-sheet': HTMLYooActionSheetElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-action-sheet': JSXElements.YooActionSheetAttributes;
    }
  }
  namespace JSXElements {
    export interface YooActionSheetAttributes extends HTMLAttributes {
      'buttons'?: IActionSheetButton[];
      'heading'?: string;
      'onActionSelected'?: (event: CustomEvent<string>) => void;
      'onActionSheetClosed'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooAlert {
      'animationName': string;
      'closeable': boolean;
      'heading': string;
      'icon': string;
      'text': string;
    }
  }

  interface HTMLYooAlertElement extends StencilComponents.YooAlert, HTMLStencilElement {}

  var HTMLYooAlertElement: {
    prototype: HTMLYooAlertElement;
    new (): HTMLYooAlertElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-alert': HTMLYooAlertElement;
  }
  interface ElementTagNameMap {
    'yoo-alert': HTMLYooAlertElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-alert': JSXElements.YooAlertAttributes;
    }
  }
  namespace JSXElements {
    export interface YooAlertAttributes extends HTMLAttributes {
      'animationName'?: string;
      'closeable'?: boolean;
      'heading'?: string;
      'icon'?: string;
      'onAlertActionSelected'?: (event: CustomEvent<boolean>) => void;
      'onAlertClosed'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooAvatar {
      'bottomLeftIcon': string;
      'bottomRightIcon': string;
      'imgSrc': string;
      'topLeftIcon': string;
      'topRightIcon': string;
    }
  }

  interface HTMLYooAvatarElement extends StencilComponents.YooAvatar, HTMLStencilElement {}

  var HTMLYooAvatarElement: {
    prototype: HTMLYooAvatarElement;
    new (): HTMLYooAvatarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-avatar': HTMLYooAvatarElement;
  }
  interface ElementTagNameMap {
    'yoo-avatar': HTMLYooAvatarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-avatar': JSXElements.YooAvatarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooAvatarAttributes extends HTMLAttributes {
      'bottomLeftIcon'?: string;
      'bottomRightIcon'?: string;
      'imgSrc'?: string;
      'topLeftIcon'?: string;
      'topRightIcon'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooBadge {
      'value': number;
    }
  }

  interface HTMLYooBadgeElement extends StencilComponents.YooBadge, HTMLStencilElement {}

  var HTMLYooBadgeElement: {
    prototype: HTMLYooBadgeElement;
    new (): HTMLYooBadgeElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-badge': HTMLYooBadgeElement;
  }
  interface ElementTagNameMap {
    'yoo-badge': HTMLYooBadgeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-badge': JSXElements.YooBadgeAttributes;
    }
  }
  namespace JSXElements {
    export interface YooBadgeAttributes extends HTMLAttributes {
      'value'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooBreadcrumbs {
      'items': string[];
    }
  }

  interface HTMLYooBreadcrumbsElement extends StencilComponents.YooBreadcrumbs, HTMLStencilElement {}

  var HTMLYooBreadcrumbsElement: {
    prototype: HTMLYooBreadcrumbsElement;
    new (): HTMLYooBreadcrumbsElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-breadcrumbs': HTMLYooBreadcrumbsElement;
  }
  interface ElementTagNameMap {
    'yoo-breadcrumbs': HTMLYooBreadcrumbsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-breadcrumbs': JSXElements.YooBreadcrumbsAttributes;
    }
  }
  namespace JSXElements {
    export interface YooBreadcrumbsAttributes extends HTMLAttributes {
      'items'?: string[];
      'onItemSelected'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooButtonGroup {
      'dropdownTitle': string;
      'isDropdown': boolean;
    }
  }

  interface HTMLYooButtonGroupElement extends StencilComponents.YooButtonGroup, HTMLStencilElement {}

  var HTMLYooButtonGroupElement: {
    prototype: HTMLYooButtonGroupElement;
    new (): HTMLYooButtonGroupElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-button-group': HTMLYooButtonGroupElement;
  }
  interface ElementTagNameMap {
    'yoo-button-group': HTMLYooButtonGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-button-group': JSXElements.YooButtonGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface YooButtonGroupAttributes extends HTMLAttributes {
      'dropdownTitle'?: string;
      'isDropdown'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooButton {
      'disabled': boolean;
      'icon': string;
      'isLoading': boolean;
      'text': string;
    }
  }

  interface HTMLYooButtonElement extends StencilComponents.YooButton, HTMLStencilElement {}

  var HTMLYooButtonElement: {
    prototype: HTMLYooButtonElement;
    new (): HTMLYooButtonElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-button': HTMLYooButtonElement;
  }
  interface ElementTagNameMap {
    'yoo-button': HTMLYooButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-button': JSXElements.YooButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface YooButtonAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'icon'?: string;
      'isLoading'?: boolean;
      'onButtonClicked'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooCard {
      'actionButtonTitle': string;
      'animationName': string;
      'avatarImgs': string[];
      'avatarShape': string;
      'bottomLeftBadge': string;
      'bottomRightBadge': string;
      'date': string;
      'hasMenu': boolean;
      'heading': string;
      'imgSrc': string;
      'isActivable': boolean;
      'isUserCard': boolean;
      'subheadings': string[];
      'tags': ITagEntry[];
      'topLeftBadge': string;
      'topRightBadge': string;
      'type': 'standard' | 'list';
    }
  }

  interface HTMLYooCardElement extends StencilComponents.YooCard, HTMLStencilElement {}

  var HTMLYooCardElement: {
    prototype: HTMLYooCardElement;
    new (): HTMLYooCardElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-card': HTMLYooCardElement;
  }
  interface ElementTagNameMap {
    'yoo-card': HTMLYooCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-card': JSXElements.YooCardAttributes;
    }
  }
  namespace JSXElements {
    export interface YooCardAttributes extends HTMLAttributes {
      'actionButtonTitle'?: string;
      'animationName'?: string;
      'avatarImgs'?: string[];
      'avatarShape'?: string;
      'bottomLeftBadge'?: string;
      'bottomRightBadge'?: string;
      'date'?: string;
      'hasMenu'?: boolean;
      'heading'?: string;
      'imgSrc'?: string;
      'isActivable'?: boolean;
      'isUserCard'?: boolean;
      'onActive'?: (event: CustomEvent<boolean>) => void;
      'onOnActionPress'?: (event: CustomEvent<boolean>) => void;
      'subheadings'?: string[];
      'tags'?: ITagEntry[];
      'topLeftBadge'?: string;
      'topRightBadge'?: string;
      'type'?: 'standard' | 'list';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooChat {
      'heading': string;
      'messages': IChatMessage[];
    }
  }

  interface HTMLYooChatElement extends StencilComponents.YooChat, HTMLStencilElement {}

  var HTMLYooChatElement: {
    prototype: HTMLYooChatElement;
    new (): HTMLYooChatElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-chat': HTMLYooChatElement;
  }
  interface ElementTagNameMap {
    'yoo-chat': HTMLYooChatElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-chat': JSXElements.YooChatAttributes;
    }
  }
  namespace JSXElements {
    export interface YooChatAttributes extends HTMLAttributes {
      'heading'?: string;
      'messages'?: IChatMessage[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooCheckbox {
      'disabled': boolean;
      'isIndeterminate': boolean;
      'onCheckboxClick': () => void;
      'state': string;
      'text': string;
    }
  }

  interface HTMLYooCheckboxElement extends StencilComponents.YooCheckbox, HTMLStencilElement {}

  var HTMLYooCheckboxElement: {
    prototype: HTMLYooCheckboxElement;
    new (): HTMLYooCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-checkbox': HTMLYooCheckboxElement;
  }
  interface ElementTagNameMap {
    'yoo-checkbox': HTMLYooCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-checkbox': JSXElements.YooCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface YooCheckboxAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'isIndeterminate'?: boolean;
      'onCheckboxToggled'?: (event: CustomEvent<string>) => void;
      'state'?: string;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooContextMenu {
      'close': () => void;
      'context': any;
      'items': Array<IContextMenuEntry>;
      'open': () => void;
    }
  }

  interface HTMLYooContextMenuElement extends StencilComponents.YooContextMenu, HTMLStencilElement {}

  var HTMLYooContextMenuElement: {
    prototype: HTMLYooContextMenuElement;
    new (): HTMLYooContextMenuElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-context-menu': HTMLYooContextMenuElement;
  }
  interface ElementTagNameMap {
    'yoo-context-menu': HTMLYooContextMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-context-menu': JSXElements.YooContextMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface YooContextMenuAttributes extends HTMLAttributes {
      'context'?: any;
      'items'?: Array<IContextMenuEntry>;
      'onContextMenuClosed'?: (event: CustomEvent<boolean>) => void;
      'onContextMenuOpened'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooDevice {
      'heading': string;
      'hideBar': boolean;
    }
  }

  interface HTMLYooDeviceElement extends StencilComponents.YooDevice, HTMLStencilElement {}

  var HTMLYooDeviceElement: {
    prototype: HTMLYooDeviceElement;
    new (): HTMLYooDeviceElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-device': HTMLYooDeviceElement;
  }
  interface ElementTagNameMap {
    'yoo-device': HTMLYooDeviceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-device': JSXElements.YooDeviceAttributes;
    }
  }
  namespace JSXElements {
    export interface YooDeviceAttributes extends HTMLAttributes {
      'heading'?: string;
      'hideBar'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooEmptyState {
      'type': string;
    }
  }

  interface HTMLYooEmptyStateElement extends StencilComponents.YooEmptyState, HTMLStencilElement {}

  var HTMLYooEmptyStateElement: {
    prototype: HTMLYooEmptyStateElement;
    new (): HTMLYooEmptyStateElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-empty-state': HTMLYooEmptyStateElement;
  }
  interface ElementTagNameMap {
    'yoo-empty-state': HTMLYooEmptyStateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-empty-state': JSXElements.YooEmptyStateAttributes;
    }
  }
  namespace JSXElements {
    export interface YooEmptyStateAttributes extends HTMLAttributes {
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooEntity {
      'displayType': string;
      'item': any;
      'mode': string;
    }
  }

  interface HTMLYooEntityElement extends StencilComponents.YooEntity, HTMLStencilElement {}

  var HTMLYooEntityElement: {
    prototype: HTMLYooEntityElement;
    new (): HTMLYooEntityElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-entity': HTMLYooEntityElement;
  }
  interface ElementTagNameMap {
    'yoo-entity': HTMLYooEntityElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-entity': JSXElements.YooEntityAttributes;
    }
  }
  namespace JSXElements {
    export interface YooEntityAttributes extends HTMLAttributes {
      'displayType'?: string;
      'item'?: any;
      'mode'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFabButton {
      'activated': boolean;
      'disabled': boolean;
      'fabEntry': FabButtonEntry;
      'icon': string;
      'label': string;
      'parentHasList': boolean;
      'text': string;
      'toggleActive': Function;
    }
  }

  interface HTMLYooFabButtonElement extends StencilComponents.YooFabButton, HTMLStencilElement {}

  var HTMLYooFabButtonElement: {
    prototype: HTMLYooFabButtonElement;
    new (): HTMLYooFabButtonElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-fab-button': HTMLYooFabButtonElement;
  }
  interface ElementTagNameMap {
    'yoo-fab-button': HTMLYooFabButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-fab-button': JSXElements.YooFabButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFabButtonAttributes extends HTMLAttributes {
      'activated'?: boolean;
      'disabled'?: boolean;
      'fabEntry'?: FabButtonEntry;
      'icon'?: string;
      'label'?: string;
      'parentHasList'?: boolean;
      'text'?: string;
      'toggleActive'?: Function;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFabContainer {
      'animated': boolean;
    }
  }

  interface HTMLYooFabContainerElement extends StencilComponents.YooFabContainer, HTMLStencilElement {}

  var HTMLYooFabContainerElement: {
    prototype: HTMLYooFabContainerElement;
    new (): HTMLYooFabContainerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-fab-container': HTMLYooFabContainerElement;
  }
  interface ElementTagNameMap {
    'yoo-fab-container': HTMLYooFabContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-fab-container': JSXElements.YooFabContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFabContainerAttributes extends HTMLAttributes {
      'animated'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFabList {
      'activated': boolean;
      'animated': boolean;
      'mini': boolean;
      'side': string;
    }
  }

  interface HTMLYooFabListElement extends StencilComponents.YooFabList, HTMLStencilElement {}

  var HTMLYooFabListElement: {
    prototype: HTMLYooFabListElement;
    new (): HTMLYooFabListElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-fab-list': HTMLYooFabListElement;
  }
  interface ElementTagNameMap {
    'yoo-fab-list': HTMLYooFabListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-fab-list': JSXElements.YooFabListAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFabListAttributes extends HTMLAttributes {
      'activated'?: boolean;
      'animated'?: boolean;
      'mini'?: boolean;
      'side'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooLoader {

    }
  }

  interface HTMLYooLoaderElement extends StencilComponents.YooLoader, HTMLStencilElement {}

  var HTMLYooLoaderElement: {
    prototype: HTMLYooLoaderElement;
    new (): HTMLYooLoaderElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-loader': HTMLYooLoaderElement;
  }
  interface ElementTagNameMap {
    'yoo-loader': HTMLYooLoaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-loader': JSXElements.YooLoaderAttributes;
    }
  }
  namespace JSXElements {
    export interface YooLoaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooModalController {
      'closeActionSheet': () => void;
      'closeAlert': (alert: any) => void;
      'closeModal': (sentFromModal: boolean) => void;
      'confirm': (customController?: boolean, cssClass?: string) => void;
      'generateActionSheet': (props: IActionSheet) => void;
      'generateAlert': (props: IAlertEntry) => void;
      'generateModal': (props: IModalEntry) => void;
      'populateModal': (modal: HTMLElement) => void;
      'show': () => void;
      'showAlert': () => void;
    }
  }

  interface HTMLYooModalControllerElement extends StencilComponents.YooModalController, HTMLStencilElement {}

  var HTMLYooModalControllerElement: {
    prototype: HTMLYooModalControllerElement;
    new (): HTMLYooModalControllerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-modal-controller': HTMLYooModalControllerElement;
  }
  interface ElementTagNameMap {
    'yoo-modal-controller': HTMLYooModalControllerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-modal-controller': JSXElements.YooModalControllerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooModalControllerAttributes extends HTMLAttributes {
      'onModalCtrlPrimaryButtonClicked'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooModal {
      'animationName': string;
      'animationProp': IAnimationProp;
      'close': () => void;
      'content': HTMLElement;
      'cssClass': string;
      'footerText': string;
      'hasFooter': boolean;
      'hasHeader': boolean;
      'heading': string;
      'headingIcon': string;
      'primaryButtonText': string;
      'primaryFn': Function;
      'secondaryButtonText': string;
      'withYooCtrl': boolean;
    }
  }

  interface HTMLYooModalElement extends StencilComponents.YooModal, HTMLStencilElement {}

  var HTMLYooModalElement: {
    prototype: HTMLYooModalElement;
    new (): HTMLYooModalElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-modal': HTMLYooModalElement;
  }
  interface ElementTagNameMap {
    'yoo-modal': HTMLYooModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-modal': JSXElements.YooModalAttributes;
    }
  }
  namespace JSXElements {
    export interface YooModalAttributes extends HTMLAttributes {
      'animationName'?: string;
      'animationProp'?: IAnimationProp;
      'content'?: HTMLElement;
      'cssClass'?: string;
      'footerText'?: string;
      'hasFooter'?: boolean;
      'hasHeader'?: boolean;
      'heading'?: string;
      'headingIcon'?: string;
      'onClosed'?: (event: CustomEvent<boolean>) => void;
      'onPrimaryButtonClicked'?: (event: CustomEvent<boolean>) => void;
      'primaryButtonText'?: string;
      'primaryFn'?: Function;
      'secondaryButtonText'?: string;
      'withYooCtrl'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooNavbar {
      'selectedTitle': string;
      'titles': string[];
    }
  }

  interface HTMLYooNavbarElement extends StencilComponents.YooNavbar, HTMLStencilElement {}

  var HTMLYooNavbarElement: {
    prototype: HTMLYooNavbarElement;
    new (): HTMLYooNavbarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-navbar': HTMLYooNavbarElement;
  }
  interface ElementTagNameMap {
    'yoo-navbar': HTMLYooNavbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-navbar': JSXElements.YooNavbarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooNavbarAttributes extends HTMLAttributes {
      'onTitleClicked'?: (event: CustomEvent<string>) => void;
      'selectedTitle'?: string;
      'titles'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooPagination {
      'currentPage': number;
      'itemsPerPage': number;
      'maxPagerSize': number;
      'showTotal': boolean;
      'totalItems': number;
    }
  }

  interface HTMLYooPaginationElement extends StencilComponents.YooPagination, HTMLStencilElement {}

  var HTMLYooPaginationElement: {
    prototype: HTMLYooPaginationElement;
    new (): HTMLYooPaginationElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-pagination': HTMLYooPaginationElement;
  }
  interface ElementTagNameMap {
    'yoo-pagination': HTMLYooPaginationElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-pagination': JSXElements.YooPaginationAttributes;
    }
  }
  namespace JSXElements {
    export interface YooPaginationAttributes extends HTMLAttributes {
      'currentPage'?: number;
      'itemsPerPage'?: number;
      'maxPagerSize'?: number;
      'onItemsPerPageChanged'?: (event: CustomEvent<number>) => void;
      'onPageChanged'?: (event: CustomEvent<any>) => void;
      'showTotal'?: boolean;
      'totalItems'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooPanel {
      'height': number;
      'width': number;
    }
  }

  interface HTMLYooPanelElement extends StencilComponents.YooPanel, HTMLStencilElement {}

  var HTMLYooPanelElement: {
    prototype: HTMLYooPanelElement;
    new (): HTMLYooPanelElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-panel': HTMLYooPanelElement;
  }
  interface ElementTagNameMap {
    'yoo-panel': HTMLYooPanelElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-panel': JSXElements.YooPanelAttributes;
    }
  }
  namespace JSXElements {
    export interface YooPanelAttributes extends HTMLAttributes {
      'height'?: number;
      'width'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooProgressBar {
      'circle': boolean;
      'hideProgress': boolean;
      'progress': number;
    }
  }

  interface HTMLYooProgressBarElement extends StencilComponents.YooProgressBar, HTMLStencilElement {}

  var HTMLYooProgressBarElement: {
    prototype: HTMLYooProgressBarElement;
    new (): HTMLYooProgressBarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-progress-bar': HTMLYooProgressBarElement;
  }
  interface ElementTagNameMap {
    'yoo-progress-bar': HTMLYooProgressBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-progress-bar': JSXElements.YooProgressBarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooProgressBarAttributes extends HTMLAttributes {
      'circle'?: boolean;
      'hideProgress'?: boolean;
      'progress'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooScrollSpy {
      'repeat': boolean;
    }
  }

  interface HTMLYooScrollSpyElement extends StencilComponents.YooScrollSpy, HTMLStencilElement {}

  var HTMLYooScrollSpyElement: {
    prototype: HTMLYooScrollSpyElement;
    new (): HTMLYooScrollSpyElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-scroll-spy': HTMLYooScrollSpyElement;
  }
  interface ElementTagNameMap {
    'yoo-scroll-spy': HTMLYooScrollSpyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-scroll-spy': JSXElements.YooScrollSpyAttributes;
    }
  }
  namespace JSXElements {
    export interface YooScrollSpyAttributes extends HTMLAttributes {
      'onEnterInView'?: (event: CustomEvent<boolean>) => void;
      'onOutOfView'?: (event: CustomEvent<boolean>) => void;
      'repeat'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooSlimScroll {
      'disable': () => void;
      'enable': () => void;
      'height': string;
      'refresh': () => void;
      'scrollToBottom': (duration?: number) => void;
      'scrollToElement': (el: HTMLElement, duration?: number) => void;
      'scrollToTop': (duration?: number) => void;
      'showScrollbar': boolean;
      'width': string;
    }
  }

  interface HTMLYooSlimScrollElement extends StencilComponents.YooSlimScroll, HTMLStencilElement {}

  var HTMLYooSlimScrollElement: {
    prototype: HTMLYooSlimScrollElement;
    new (): HTMLYooSlimScrollElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-slim-scroll': HTMLYooSlimScrollElement;
  }
  interface ElementTagNameMap {
    'yoo-slim-scroll': HTMLYooSlimScrollElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-slim-scroll': JSXElements.YooSlimScrollAttributes;
    }
  }
  namespace JSXElements {
    export interface YooSlimScrollAttributes extends HTMLAttributes {
      'height'?: string;
      'onAtBottom'?: (event: CustomEvent<boolean>) => void;
      'onAtLeft'?: (event: CustomEvent<boolean>) => void;
      'onScrollEnd'?: (event: CustomEvent<boolean>) => void;
      'onScrollStart'?: (event: CustomEvent<boolean>) => void;
      'showScrollbar'?: boolean;
      'width'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooSticky {
      'bottom': string;
      'top': string;
    }
  }

  interface HTMLYooStickyElement extends StencilComponents.YooSticky, HTMLStencilElement {}

  var HTMLYooStickyElement: {
    prototype: HTMLYooStickyElement;
    new (): HTMLYooStickyElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-sticky': HTMLYooStickyElement;
  }
  interface ElementTagNameMap {
    'yoo-sticky': HTMLYooStickyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-sticky': JSXElements.YooStickyAttributes;
    }
  }
  namespace JSXElements {
    export interface YooStickyAttributes extends HTMLAttributes {
      'bottom'?: string;
      'top'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTabs {
      'numberTabsDisplayed': number;
      'selected': number;
      'titles': string[];
    }
  }

  interface HTMLYooTabsElement extends StencilComponents.YooTabs, HTMLStencilElement {}

  var HTMLYooTabsElement: {
    prototype: HTMLYooTabsElement;
    new (): HTMLYooTabsElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-tabs': HTMLYooTabsElement;
  }
  interface ElementTagNameMap {
    'yoo-tabs': HTMLYooTabsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-tabs': JSXElements.YooTabsAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTabsAttributes extends HTMLAttributes {
      'numberTabsDisplayed'?: number;
      'onTabChanged'?: (event: CustomEvent<string>) => void;
      'selected'?: number;
      'titles'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTag {
      'closable': boolean;
      'icon': string;
      'text': string;
    }
  }

  interface HTMLYooTagElement extends StencilComponents.YooTag, HTMLStencilElement {}

  var HTMLYooTagElement: {
    prototype: HTMLYooTagElement;
    new (): HTMLYooTagElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-tag': HTMLYooTagElement;
  }
  interface ElementTagNameMap {
    'yoo-tag': HTMLYooTagElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-tag': JSXElements.YooTagAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTagAttributes extends HTMLAttributes {
      'closable'?: boolean;
      'icon'?: string;
      'onTagClosed'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooToolbar {
      'actions': IActionBar[];
      'showActive': boolean;
    }
  }

  interface HTMLYooToolbarElement extends StencilComponents.YooToolbar, HTMLStencilElement {}

  var HTMLYooToolbarElement: {
    prototype: HTMLYooToolbarElement;
    new (): HTMLYooToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-toolbar': HTMLYooToolbarElement;
  }
  interface ElementTagNameMap {
    'yoo-toolbar': HTMLYooToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-toolbar': JSXElements.YooToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooToolbarAttributes extends HTMLAttributes {
      'actions'?: IActionBar[];
      'showActive'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTooltip {
      'options': any;
      'placement': 'top' | 'bottom' | 'left' | 'right' | 'top-start' | 'top-end';
      'text': string;
    }
  }

  interface HTMLYooTooltipElement extends StencilComponents.YooTooltip, HTMLStencilElement {}

  var HTMLYooTooltipElement: {
    prototype: HTMLYooTooltipElement;
    new (): HTMLYooTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-tooltip': HTMLYooTooltipElement;
  }
  interface ElementTagNameMap {
    'yoo-tooltip': HTMLYooTooltipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-tooltip': JSXElements.YooTooltipAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTooltipAttributes extends HTMLAttributes {
      'options'?: any;
      'placement'?: 'top' | 'bottom' | 'left' | 'right' | 'top-start' | 'top-end';
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTransition {
      'heading': string;
      'icon': string;
      'image': string;
      'subHeading': string;
      'type': 'fade' | 'bottom' | 'icon' | 'image' | 'heading' | 'scale-up';
    }
  }

  interface HTMLYooTransitionElement extends StencilComponents.YooTransition, HTMLStencilElement {}

  var HTMLYooTransitionElement: {
    prototype: HTMLYooTransitionElement;
    new (): HTMLYooTransitionElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-transition': HTMLYooTransitionElement;
  }
  interface ElementTagNameMap {
    'yoo-transition': HTMLYooTransitionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-transition': JSXElements.YooTransitionAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTransitionAttributes extends HTMLAttributes {
      'heading'?: string;
      'icon'?: string;
      'image'?: string;
      'subHeading'?: string;
      'type'?: 'fade' | 'bottom' | 'icon' | 'image' | 'heading' | 'scale-up';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooVerticalMenu {
      'entry': IVerticalMenuEntry;
      'fixed': boolean;
      'heading': string;
      'setItemActive': (menuItem: IVerticalMenuItem) => void;
    }
  }

  interface HTMLYooVerticalMenuElement extends StencilComponents.YooVerticalMenu, HTMLStencilElement {}

  var HTMLYooVerticalMenuElement: {
    prototype: HTMLYooVerticalMenuElement;
    new (): HTMLYooVerticalMenuElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-vertical-menu': HTMLYooVerticalMenuElement;
  }
  interface ElementTagNameMap {
    'yoo-vertical-menu': HTMLYooVerticalMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-vertical-menu': JSXElements.YooVerticalMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface YooVerticalMenuAttributes extends HTMLAttributes {
      'entry'?: IVerticalMenuEntry;
      'fixed'?: boolean;
      'heading'?: string;
      'onItemClicked'?: (event: CustomEvent<IVerticalMenuItem>) => void;
      'onMenuClosed'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooColorPicker {
      'color': string;
      'hideLabel': boolean;
    }
  }

  interface HTMLYooColorPickerElement extends StencilComponents.YooColorPicker, HTMLStencilElement {}

  var HTMLYooColorPickerElement: {
    prototype: HTMLYooColorPickerElement;
    new (): HTMLYooColorPickerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-color-picker': HTMLYooColorPickerElement;
  }
  interface ElementTagNameMap {
    'yoo-color-picker': HTMLYooColorPickerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-color-picker': JSXElements.YooColorPickerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooColorPickerAttributes extends HTMLAttributes {
      'color'?: string;
      'hideLabel'?: boolean;
      'onColorSelected'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormAutocomplete {

    }
  }

  interface HTMLYooFormAutocompleteElement extends StencilComponents.YooFormAutocomplete, HTMLStencilElement {}

  var HTMLYooFormAutocompleteElement: {
    prototype: HTMLYooFormAutocompleteElement;
    new (): HTMLYooFormAutocompleteElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-autocomplete': HTMLYooFormAutocompleteElement;
  }
  interface ElementTagNameMap {
    'yoo-form-autocomplete': HTMLYooFormAutocompleteElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-autocomplete': JSXElements.YooFormAutocompleteAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormAutocompleteAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormButtonChoice {
      'choices': string[];
      'multiple': boolean;
      'selected': boolean [];
    }
  }

  interface HTMLYooFormButtonChoiceElement extends StencilComponents.YooFormButtonChoice, HTMLStencilElement {}

  var HTMLYooFormButtonChoiceElement: {
    prototype: HTMLYooFormButtonChoiceElement;
    new (): HTMLYooFormButtonChoiceElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-button-choice': HTMLYooFormButtonChoiceElement;
  }
  interface ElementTagNameMap {
    'yoo-form-button-choice': HTMLYooFormButtonChoiceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-button-choice': JSXElements.YooFormButtonChoiceAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormButtonChoiceAttributes extends HTMLAttributes {
      'choices'?: string[];
      'multiple'?: boolean;
      'onChanged'?: (event: CustomEvent<string[]>) => void;
      'selected'?: boolean [];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormChecklist {
      'previousTasks': Array<string>;
    }
  }

  interface HTMLYooFormChecklistElement extends StencilComponents.YooFormChecklist, HTMLStencilElement {}

  var HTMLYooFormChecklistElement: {
    prototype: HTMLYooFormChecklistElement;
    new (): HTMLYooFormChecklistElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-checklist': HTMLYooFormChecklistElement;
  }
  interface ElementTagNameMap {
    'yoo-form-checklist': HTMLYooFormChecklistElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-checklist': JSXElements.YooFormChecklistAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormChecklistAttributes extends HTMLAttributes {
      'previousTasks'?: Array<string>;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormContainer {
      'description': string;
      'hint': string;
      'label': string;
      'required': boolean;
    }
  }

  interface HTMLYooFormContainerElement extends StencilComponents.YooFormContainer, HTMLStencilElement {}

  var HTMLYooFormContainerElement: {
    prototype: HTMLYooFormContainerElement;
    new (): HTMLYooFormContainerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-container': HTMLYooFormContainerElement;
  }
  interface ElementTagNameMap {
    'yoo-form-container': HTMLYooFormContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-container': JSXElements.YooFormContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormContainerAttributes extends HTMLAttributes {
      'description'?: string;
      'hint'?: string;
      'label'?: string;
      'required'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormDateTime {
      'placeholder': string;
      'placeholdertolabel': boolean;
      'required': boolean;
    }
  }

  interface HTMLYooFormDateTimeElement extends StencilComponents.YooFormDateTime, HTMLStencilElement {}

  var HTMLYooFormDateTimeElement: {
    prototype: HTMLYooFormDateTimeElement;
    new (): HTMLYooFormDateTimeElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-date-time': HTMLYooFormDateTimeElement;
  }
  interface ElementTagNameMap {
    'yoo-form-date-time': HTMLYooFormDateTimeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-date-time': JSXElements.YooFormDateTimeAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormDateTimeAttributes extends HTMLAttributes {
      'placeholder'?: string;
      'placeholdertolabel'?: boolean;
      'required'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInputGame {
      'fieldId': string;
      'name': string;
      'phaser': any;
    }
  }

  interface HTMLYooFormInputGameElement extends StencilComponents.YooFormInputGame, HTMLStencilElement {}

  var HTMLYooFormInputGameElement: {
    prototype: HTMLYooFormInputGameElement;
    new (): HTMLYooFormInputGameElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input-game': HTMLYooFormInputGameElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input-game': HTMLYooFormInputGameElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input-game': JSXElements.YooFormInputGameAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputGameAttributes extends HTMLAttributes {
      'fieldId'?: string;
      'name'?: string;
      'onGameOver'?: (event: CustomEvent<boolean>) => void;
      'phaser'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInputValidated {
      'asyncValidate': () => Promise<boolean>;
      'asyncValidators': Array<AsyncValidator<string>>;
      'validate': () => boolean;
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string;
    }
  }

  interface HTMLYooFormInputValidatedElement extends StencilComponents.YooFormInputValidated, HTMLStencilElement {}

  var HTMLYooFormInputValidatedElement: {
    prototype: HTMLYooFormInputValidatedElement;
    new (): HTMLYooFormInputValidatedElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input-validated': HTMLYooFormInputValidatedElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input-validated': HTMLYooFormInputValidatedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input-validated': JSXElements.YooFormInputValidatedAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputValidatedAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'onChanged'?: (event: CustomEvent<string>) => void;
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInput {
      'borderColorOnFocus': string;
      'iconPrefix': string;
      'iconSuffix': string;
      'placeholder': string;
      'placeholdertolabel': boolean;
      'required': boolean;
      'showInputClear': boolean;
      'showPasswordToggle': boolean;
      'tooltip': string;
      'type': string;
      'value': string;
    }
  }

  interface HTMLYooFormInputElement extends StencilComponents.YooFormInput, HTMLStencilElement {}

  var HTMLYooFormInputElement: {
    prototype: HTMLYooFormInputElement;
    new (): HTMLYooFormInputElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input': HTMLYooFormInputElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input': HTMLYooFormInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input': JSXElements.YooFormInputAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputAttributes extends HTMLAttributes {
      'borderColorOnFocus'?: string;
      'iconPrefix'?: string;
      'iconSuffix'?: string;
      'onIconClicked'?: (event: CustomEvent<string>) => void;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'placeholder'?: string;
      'placeholdertolabel'?: boolean;
      'required'?: boolean;
      'showInputClear'?: boolean;
      'showPasswordToggle'?: boolean;
      'tooltip'?: string;
      'type'?: string;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormProgressIndicator {
      'currentStep': number;
      'isCompleted': boolean;
      'steps': string[];
    }
  }

  interface HTMLYooFormProgressIndicatorElement extends StencilComponents.YooFormProgressIndicator, HTMLStencilElement {}

  var HTMLYooFormProgressIndicatorElement: {
    prototype: HTMLYooFormProgressIndicatorElement;
    new (): HTMLYooFormProgressIndicatorElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-progress-indicator': HTMLYooFormProgressIndicatorElement;
  }
  interface ElementTagNameMap {
    'yoo-form-progress-indicator': HTMLYooFormProgressIndicatorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-progress-indicator': JSXElements.YooFormProgressIndicatorAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormProgressIndicatorAttributes extends HTMLAttributes {
      'currentStep'?: number;
      'isCompleted'?: boolean;
      'onStepSelected'?: (event: CustomEvent<string>) => void;
      'steps'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRadioGroup {
      'multipleSelection': boolean;
      'values': IRadioGroupEntry[];
    }
  }

  interface HTMLYooFormRadioGroupElement extends StencilComponents.YooFormRadioGroup, HTMLStencilElement {}

  var HTMLYooFormRadioGroupElement: {
    prototype: HTMLYooFormRadioGroupElement;
    new (): HTMLYooFormRadioGroupElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-radio-group': HTMLYooFormRadioGroupElement;
  }
  interface ElementTagNameMap {
    'yoo-form-radio-group': HTMLYooFormRadioGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-radio-group': JSXElements.YooFormRadioGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRadioGroupAttributes extends HTMLAttributes {
      'multipleSelection'?: boolean;
      'onSelectionChanged'?: (event: CustomEvent<Array<IRadioGroupEntry>>) => void;
      'values'?: IRadioGroupEntry[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRanking {
      'values': IItemRanking[];
    }
  }

  interface HTMLYooFormRankingElement extends StencilComponents.YooFormRanking, HTMLStencilElement {}

  var HTMLYooFormRankingElement: {
    prototype: HTMLYooFormRankingElement;
    new (): HTMLYooFormRankingElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-ranking': HTMLYooFormRankingElement;
  }
  interface ElementTagNameMap {
    'yoo-form-ranking': HTMLYooFormRankingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-ranking': JSXElements.YooFormRankingAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRankingAttributes extends HTMLAttributes {
      'onChanged'?: (event: CustomEvent<IItemRanking[]>) => void;
      'values'?: IItemRanking[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormSlider {
      'disabled': boolean;
      'doubleSlider': boolean;
      'hideLabel': boolean;
      'hideReferences': boolean;
      'initialValue': number;
      'maximum': number;
      'minimum': number;
    }
  }

  interface HTMLYooFormSliderElement extends StencilComponents.YooFormSlider, HTMLStencilElement {}

  var HTMLYooFormSliderElement: {
    prototype: HTMLYooFormSliderElement;
    new (): HTMLYooFormSliderElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-slider': HTMLYooFormSliderElement;
  }
  interface ElementTagNameMap {
    'yoo-form-slider': HTMLYooFormSliderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-slider': JSXElements.YooFormSliderAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormSliderAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'doubleSlider'?: boolean;
      'hideLabel'?: boolean;
      'hideReferences'?: boolean;
      'initialValue'?: number;
      'maximum'?: number;
      'minimum'?: number;
      'onDoubleSliderChanged'?: (event: CustomEvent<{lowValue: number, highValue: number}>) => void;
      'onSingleSliderChanged'?: (event: CustomEvent<number>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormStarRating {
      'stars': number;
    }
  }

  interface HTMLYooFormStarRatingElement extends StencilComponents.YooFormStarRating, HTMLStencilElement {}

  var HTMLYooFormStarRatingElement: {
    prototype: HTMLYooFormStarRatingElement;
    new (): HTMLYooFormStarRatingElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-star-rating': HTMLYooFormStarRatingElement;
  }
  interface ElementTagNameMap {
    'yoo-form-star-rating': HTMLYooFormStarRatingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-star-rating': JSXElements.YooFormStarRatingAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormStarRatingAttributes extends HTMLAttributes {
      'onChanged'?: (event: CustomEvent<number>) => void;
      'stars'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormTimer {
      'timeChanged': (event: any, position: string) => void;
    }
  }

  interface HTMLYooFormTimerElement extends StencilComponents.YooFormTimer, HTMLStencilElement {}

  var HTMLYooFormTimerElement: {
    prototype: HTMLYooFormTimerElement;
    new (): HTMLYooFormTimerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-timer': HTMLYooFormTimerElement;
  }
  interface ElementTagNameMap {
    'yoo-form-timer': HTMLYooFormTimerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-timer': JSXElements.YooFormTimerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormTimerAttributes extends HTMLAttributes {
      'onTimeCalculated'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormToggle {

    }
  }

  interface HTMLYooFormToggleElement extends StencilComponents.YooFormToggle, HTMLStencilElement {}

  var HTMLYooFormToggleElement: {
    prototype: HTMLYooFormToggleElement;
    new (): HTMLYooFormToggleElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-toggle': HTMLYooFormToggleElement;
  }
  interface ElementTagNameMap {
    'yoo-form-toggle': HTMLYooFormToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-toggle': JSXElements.YooFormToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormToggleAttributes extends HTMLAttributes {
      'onToggled'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooGrid {
      'canToggleDisplay': boolean;
      'columnDefs': Array<any>;
      'displayType': string;
      'hideFooter': boolean;
      'hideHeader': boolean;
      'items': Array<any>;
      'onPullToRefresh': (ev: any) => void;
      'pageSize': number;
      'showCreate': boolean;
      'showFilters': boolean;
      'showFiltersSimple': boolean;
      'total': number;
      'type': 'grid' | 'list' | 'card' | 'tree';
    }
  }

  interface HTMLYooGridElement extends StencilComponents.YooGrid, HTMLStencilElement {}

  var HTMLYooGridElement: {
    prototype: HTMLYooGridElement;
    new (): HTMLYooGridElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-grid': HTMLYooGridElement;
  }
  interface ElementTagNameMap {
    'yoo-grid': HTMLYooGridElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-grid': JSXElements.YooGridAttributes;
    }
  }
  namespace JSXElements {
    export interface YooGridAttributes extends HTMLAttributes {
      'canToggleDisplay'?: boolean;
      'columnDefs'?: Array<any>;
      'displayType'?: string;
      'hideFooter'?: boolean;
      'hideHeader'?: boolean;
      'items'?: Array<any>;
      'onFetchData'?: (event: CustomEvent<IGridSearch>) => void;
      'pageSize'?: number;
      'showCreate'?: boolean;
      'showFilters'?: boolean;
      'showFiltersSimple'?: boolean;
      'total'?: number;
      'type'?: 'grid' | 'list' | 'card' | 'tree';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooRadio {
      'disabled': boolean;
      'state': string;
      'text': string;
    }
  }

  interface HTMLYooRadioElement extends StencilComponents.YooRadio, HTMLStencilElement {}

  var HTMLYooRadioElement: {
    prototype: HTMLYooRadioElement;
    new (): HTMLYooRadioElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-radio': HTMLYooRadioElement;
  }
  interface ElementTagNameMap {
    'yoo-radio': HTMLYooRadioElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-radio': JSXElements.YooRadioAttributes;
    }
  }
  namespace JSXElements {
    export interface YooRadioAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'onRadioClicked'?: (event: CustomEvent) => void;
      'state'?: string;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooSignaturePad {

    }
  }

  interface HTMLYooSignaturePadElement extends StencilComponents.YooSignaturePad, HTMLStencilElement {}

  var HTMLYooSignaturePadElement: {
    prototype: HTMLYooSignaturePadElement;
    new (): HTMLYooSignaturePadElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-signature-pad': HTMLYooSignaturePadElement;
  }
  interface ElementTagNameMap {
    'yoo-signature-pad': HTMLYooSignaturePadElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-signature-pad': JSXElements.YooSignaturePadAttributes;
    }
  }
  namespace JSXElements {
    export interface YooSignaturePadAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTextEditor {

    }
  }

  interface HTMLYooTextEditorElement extends StencilComponents.YooTextEditor, HTMLStencilElement {}

  var HTMLYooTextEditorElement: {
    prototype: HTMLYooTextEditorElement;
    new (): HTMLYooTextEditorElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-text-editor': HTMLYooTextEditorElement;
  }
  interface ElementTagNameMap {
    'yoo-text-editor': HTMLYooTextEditorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-text-editor': JSXElements.YooTextEditorAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTextEditorAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooAmap {
      'filterGroups': IFilterGroup[];
      'mapEntry': IMapEntry;
    }
  }

  interface HTMLYooAmapElement extends StencilComponents.YooAmap, HTMLStencilElement {}

  var HTMLYooAmapElement: {
    prototype: HTMLYooAmapElement;
    new (): HTMLYooAmapElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-amap': HTMLYooAmapElement;
  }
  interface ElementTagNameMap {
    'yoo-amap': HTMLYooAmapElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-amap': JSXElements.YooAmapAttributes;
    }
  }
  namespace JSXElements {
    export interface YooAmapAttributes extends HTMLAttributes {
      'filterGroups'?: IFilterGroup[];
      'mapEntry'?: IMapEntry;
      'onFilterGroupsChanged'?: (event: CustomEvent<IFilterGroup[]>) => void;
      'onSelected'?: (event: CustomEvent<IMarker>) => void;
      'onSelectedMultiple'?: (event: CustomEvent<IMarker[]>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooMapGl {
      'filterGroups': IFilterGroup[];
      'mapEntry': IMapEntry;
    }
  }

  interface HTMLYooMapGlElement extends StencilComponents.YooMapGl, HTMLStencilElement {}

  var HTMLYooMapGlElement: {
    prototype: HTMLYooMapGlElement;
    new (): HTMLYooMapGlElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-map-gl': HTMLYooMapGlElement;
  }
  interface ElementTagNameMap {
    'yoo-map-gl': HTMLYooMapGlElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-map-gl': JSXElements.YooMapGlAttributes;
    }
  }
  namespace JSXElements {
    export interface YooMapGlAttributes extends HTMLAttributes {
      'filterGroups'?: IFilterGroup[];
      'mapEntry'?: IMapEntry;
      'onFilterGroupsChanged'?: (event: CustomEvent<IFilterGroup[]>) => void;
      'onSelected'?: (event: CustomEvent<IMarker>) => void;
      'onSelectedMultiple'?: (event: CustomEvent<IMarker[]>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooMapJs {
      'filterGroups': IFilterGroup[];
      'mapEntry': IMapEntry;
    }
  }

  interface HTMLYooMapJsElement extends StencilComponents.YooMapJs, HTMLStencilElement {}

  var HTMLYooMapJsElement: {
    prototype: HTMLYooMapJsElement;
    new (): HTMLYooMapJsElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-map-js': HTMLYooMapJsElement;
  }
  interface ElementTagNameMap {
    'yoo-map-js': HTMLYooMapJsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-map-js': JSXElements.YooMapJsAttributes;
    }
  }
  namespace JSXElements {
    export interface YooMapJsAttributes extends HTMLAttributes {
      'filterGroups'?: IFilterGroup[];
      'mapEntry'?: IMapEntry;
      'onFilterGroupsChanged'?: (event: CustomEvent<IFilterGroup[]>) => void;
      'onSelected'?: (event: CustomEvent<IMarker>) => void;
      'onSelectedMultiple'?: (event: CustomEvent<IMarker[]>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooMap {
      'currentLanguage': string;
      'disableZoom': boolean;
      'filterGroups': IFilterGroup[];
      'fitToMarkers': boolean;
      'groupBy': string;
      'hideLegend': boolean;
      'icon': string;
      'legendColors': IMarkerColor[];
      'mapEntry': IMapEntry;
      'markers': IMarker[];
      'maxZoom': number;
      'minZoom': number;
      'position': IPosition;
      'setProps': (mapEntry: IMapEntry) => void;
      'showControls': boolean;
      'showDirections': boolean;
      'useCluster': boolean;
      'zoom': number;
    }
  }

  interface HTMLYooMapElement extends StencilComponents.YooMap, HTMLStencilElement {}

  var HTMLYooMapElement: {
    prototype: HTMLYooMapElement;
    new (): HTMLYooMapElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-map': HTMLYooMapElement;
  }
  interface ElementTagNameMap {
    'yoo-map': HTMLYooMapElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-map': JSXElements.YooMapAttributes;
    }
  }
  namespace JSXElements {
    export interface YooMapAttributes extends HTMLAttributes {
      'currentLanguage'?: string;
      'disableZoom'?: boolean;
      'filterGroups'?: IFilterGroup[];
      'fitToMarkers'?: boolean;
      'groupBy'?: string;
      'hideLegend'?: boolean;
      'icon'?: string;
      'legendColors'?: IMarkerColor[];
      'mapEntry'?: IMapEntry;
      'markers'?: IMarker[];
      'maxZoom'?: number;
      'minZoom'?: number;
      'onFilterGroupsChangedParent'?: (event: CustomEvent<IFilterGroup[]>) => void;
      'onSelectedMultipleParent'?: (event: CustomEvent<IMarker[]>) => void;
      'onSelectedParent'?: (event: CustomEvent<IMarker>) => void;
      'position'?: IPosition;
      'showControls'?: boolean;
      'showDirections'?: boolean;
      'useCluster'?: boolean;
      'zoom'?: number;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
