/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@ionic/core';
import 'ionicons';

import {
  AsyncValidator,
  CardType,
  EntityType,
  FormStarType,
  FormToogleType,
  IActionBar,
  IActionSheet,
  IActionSheetButton,
  IAlertEntry,
  IAnimationProp,
  IBadgeEntry,
  ICalendarMarker,
  ICardEntry,
  ICardListEntry,
  ICardStickyEntry,
  IChatMessage,
  IContextMenuEntry,
  IDateChange,
  IEntityAction,
  IFeed,
  IFormField,
  IFormSearch,
  IGridSearch,
  IItemRanking,
  ILanguage,
  ILanguageSelector,
  ILoginDetails,
  IMission,
  IModalEntry,
  INavBarTab,
  IRadioGroupEntry,
  IRangeValue,
  ISlide,
  IUser,
  IVerticalMenuEntry,
  IVerticalMenuItem,
  IWalkthroughEntry,
  IWalkthroughSlideEvent,
  IWebMenuEntry,
  Validator,
  ValidatorEntry,
} from '@shared/interfaces';
import {
  EventEmitter,
} from '@stencil/core';
import {
  YooSlimScrollComponent,
} from './components/core/slim-scroll/slim-scroll';
import {
  FabButtonEntry,
} from './components/core/fab-button/fab-button';

declare global {

  namespace StencilComponents {
    interface YooChatCreate {

    }
  }

  interface HTMLYooChatCreateElement extends StencilComponents.YooChatCreate, HTMLStencilElement {}

  var HTMLYooChatCreateElement: {
    prototype: HTMLYooChatCreateElement;
    new (): HTMLYooChatCreateElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-chat-create': HTMLYooChatCreateElement;
  }
  interface ElementTagNameMap {
    'yoo-chat-create': HTMLYooChatCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-chat-create': JSXElements.YooChatCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface YooChatCreateAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooEventCreate {

    }
  }

  interface HTMLYooEventCreateElement extends StencilComponents.YooEventCreate, HTMLStencilElement {}

  var HTMLYooEventCreateElement: {
    prototype: HTMLYooEventCreateElement;
    new (): HTMLYooEventCreateElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-event-create': HTMLYooEventCreateElement;
  }
  interface ElementTagNameMap {
    'yoo-event-create': HTMLYooEventCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-event-create': JSXElements.YooEventCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface YooEventCreateAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFeedCreate {
      'photoItems': Array<any>;
    }
  }

  interface HTMLYooFeedCreateElement extends StencilComponents.YooFeedCreate, HTMLStencilElement {}

  var HTMLYooFeedCreateElement: {
    prototype: HTMLYooFeedCreateElement;
    new (): HTMLYooFeedCreateElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-feed-create': HTMLYooFeedCreateElement;
  }
  interface ElementTagNameMap {
    'yoo-feed-create': HTMLYooFeedCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-feed-create': JSXElements.YooFeedCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFeedCreateAttributes extends HTMLAttributes {
      'photoItems'?: Array<any>;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooLanguageSelector {
      'currentLanguage': string;
      'languages': ILanguage[];
    }
  }

  interface HTMLYooLanguageSelectorElement extends StencilComponents.YooLanguageSelector, HTMLStencilElement {}

  var HTMLYooLanguageSelectorElement: {
    prototype: HTMLYooLanguageSelectorElement;
    new (): HTMLYooLanguageSelectorElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-language-selector': HTMLYooLanguageSelectorElement;
  }
  interface ElementTagNameMap {
    'yoo-language-selector': HTMLYooLanguageSelectorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-language-selector': JSXElements.YooLanguageSelectorAttributes;
    }
  }
  namespace JSXElements {
    export interface YooLanguageSelectorAttributes extends HTMLAttributes {
      'currentLanguage'?: string;
      'languages'?: ILanguage[];
      'onLanguageSelected'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooLogin {
      'backgroundColor': string;
      'backgroundSrc': string;
      'borderClass': string;
      'buttonClass': string;
      'currentLanguage': string;
      'emailLabel': string;
      'error': string;
      'forgotPasswordText': string;
      'languages': ILanguage[];
      'leftPanelFooterText': string;
      'leftPanelMobileHeaderIcon': string;
      'leftPanelWebHeaderIcon': string;
      'loading': boolean;
      'loginButtonText': string;
      'magicLinkButtonText': string;
      'passwordLabel': string;
      'rememberMeText': string;
      'resetPasswordButtonText': string;
      'showRememberMe': boolean;
      'webLoginFormSubtitle': string;
      'webLoginFormTitle': string;
      'webSubtitleText': string[];
      'webTitleText': string;
    }
  }

  interface HTMLYooLoginElement extends StencilComponents.YooLogin, HTMLStencilElement {}

  var HTMLYooLoginElement: {
    prototype: HTMLYooLoginElement;
    new (): HTMLYooLoginElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-login': HTMLYooLoginElement;
  }
  interface ElementTagNameMap {
    'yoo-login': HTMLYooLoginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-login': JSXElements.YooLoginAttributes;
    }
  }
  namespace JSXElements {
    export interface YooLoginAttributes extends HTMLAttributes {
      'backgroundColor'?: string;
      'backgroundSrc'?: string;
      'borderClass'?: string;
      'buttonClass'?: string;
      'currentLanguage'?: string;
      'emailLabel'?: string;
      'error'?: string;
      'forgotPasswordText'?: string;
      'languages'?: ILanguage[];
      'leftPanelFooterText'?: string;
      'leftPanelMobileHeaderIcon'?: string;
      'leftPanelWebHeaderIcon'?: string;
      'loading'?: boolean;
      'loginButtonText'?: string;
      'magicLinkButtonText'?: string;
      'onAdvancedLoginRequested'?: (event: CustomEvent<boolean>) => void;
      'onDoLogin'?: (event: CustomEvent<ILoginDetails>) => void;
      'onLanguageSelectedParent'?: (event: CustomEvent<string>) => void;
      'onMagicLinkModalRequested'?: (event: CustomEvent<boolean>) => void;
      'onPasswordResetModalRequested'?: (event: CustomEvent<boolean>) => void;
      'onRememberMeSelected'?: (event: CustomEvent<boolean>) => void;
      'passwordLabel'?: string;
      'rememberMeText'?: string;
      'resetPasswordButtonText'?: string;
      'showRememberMe'?: boolean;
      'webLoginFormSubtitle'?: string;
      'webLoginFormTitle'?: string;
      'webSubtitleText'?: string[];
      'webTitleText'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooProfile {
      'config': any;
    }
  }

  interface HTMLYooProfileElement extends StencilComponents.YooProfile, HTMLStencilElement {}

  var HTMLYooProfileElement: {
    prototype: HTMLYooProfileElement;
    new (): HTMLYooProfileElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-profile': HTMLYooProfileElement;
  }
  interface ElementTagNameMap {
    'yoo-profile': HTMLYooProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-profile': JSXElements.YooProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface YooProfileAttributes extends HTMLAttributes {
      'config'?: any;
      'onClicked'?: (event: CustomEvent<string>) => void;
      'onLogout'?: (event: CustomEvent<boolean>) => void;
      'onProfileEdit'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooResetPassword {
      'borderClass': string;
      'buttonClass': string;
      'buttonText': string;
      'heading': string;
      'inputLabel': string;
      'isMagicLink': boolean;
      'showTitle': boolean;
      'subheading': string;
    }
  }

  interface HTMLYooResetPasswordElement extends StencilComponents.YooResetPassword, HTMLStencilElement {}

  var HTMLYooResetPasswordElement: {
    prototype: HTMLYooResetPasswordElement;
    new (): HTMLYooResetPasswordElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-reset-password': HTMLYooResetPasswordElement;
  }
  interface ElementTagNameMap {
    'yoo-reset-password': HTMLYooResetPasswordElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-reset-password': JSXElements.YooResetPasswordAttributes;
    }
  }
  namespace JSXElements {
    export interface YooResetPasswordAttributes extends HTMLAttributes {
      'borderClass'?: string;
      'buttonClass'?: string;
      'buttonText'?: string;
      'heading'?: string;
      'inputLabel'?: string;
      'isMagicLink'?: boolean;
      'onPasswordResetRequestSubmitted'?: (event: CustomEvent<{email: string, isMagicLink: boolean}>) => void;
      'showTitle'?: boolean;
      'subheading'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooSearchPage {

    }
  }

  interface HTMLYooSearchPageElement extends StencilComponents.YooSearchPage, HTMLStencilElement {}

  var HTMLYooSearchPageElement: {
    prototype: HTMLYooSearchPageElement;
    new (): HTMLYooSearchPageElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-search-page': HTMLYooSearchPageElement;
  }
  interface ElementTagNameMap {
    'yoo-search-page': HTMLYooSearchPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-search-page': JSXElements.YooSearchPageAttributes;
    }
  }
  namespace JSXElements {
    export interface YooSearchPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooServiceCreate {

    }
  }

  interface HTMLYooServiceCreateElement extends StencilComponents.YooServiceCreate, HTMLStencilElement {}

  var HTMLYooServiceCreateElement: {
    prototype: HTMLYooServiceCreateElement;
    new (): HTMLYooServiceCreateElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-service-create': HTMLYooServiceCreateElement;
  }
  interface ElementTagNameMap {
    'yoo-service-create': HTMLYooServiceCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-service-create': JSXElements.YooServiceCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface YooServiceCreateAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTaskCreate {

    }
  }

  interface HTMLYooTaskCreateElement extends StencilComponents.YooTaskCreate, HTMLStencilElement {}

  var HTMLYooTaskCreateElement: {
    prototype: HTMLYooTaskCreateElement;
    new (): HTMLYooTaskCreateElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-task-create': HTMLYooTaskCreateElement;
  }
  interface ElementTagNameMap {
    'yoo-task-create': HTMLYooTaskCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-task-create': JSXElements.YooTaskCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTaskCreateAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooWalkthrough {
      'config': Array<IWalkthroughEntry>;
      'isEnd': () => boolean;
      'lockSwipes': (shouldLock: boolean) => void;
      'slideNext': () => void;
      'update': () => void;
    }
  }

  interface HTMLYooWalkthroughElement extends StencilComponents.YooWalkthrough, HTMLStencilElement {}

  var HTMLYooWalkthroughElement: {
    prototype: HTMLYooWalkthroughElement;
    new (): HTMLYooWalkthroughElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-walkthrough': HTMLYooWalkthroughElement;
  }
  interface ElementTagNameMap {
    'yoo-walkthrough': HTMLYooWalkthroughElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-walkthrough': JSXElements.YooWalkthroughAttributes;
    }
  }
  namespace JSXElements {
    export interface YooWalkthroughAttributes extends HTMLAttributes {
      'config'?: Array<IWalkthroughEntry>;
      'onSlideChanged'?: (event: CustomEvent<IWalkthroughSlideEvent>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooAccordion {
      'allowMultipleSelection': boolean;
      'titles': string[];
    }
  }

  interface HTMLYooAccordionElement extends StencilComponents.YooAccordion, HTMLStencilElement {}

  var HTMLYooAccordionElement: {
    prototype: HTMLYooAccordionElement;
    new (): HTMLYooAccordionElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-accordion': HTMLYooAccordionElement;
  }
  interface ElementTagNameMap {
    'yoo-accordion': HTMLYooAccordionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-accordion': JSXElements.YooAccordionAttributes;
    }
  }
  namespace JSXElements {
    export interface YooAccordionAttributes extends HTMLAttributes {
      'allowMultipleSelection'?: boolean;
      'onAccordionSelected'?: (event: CustomEvent<number>) => void;
      'titles'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooActionSheet {
      'buttons': IActionSheetButton[];
      'heading': string;
    }
  }

  interface HTMLYooActionSheetElement extends StencilComponents.YooActionSheet, HTMLStencilElement {}

  var HTMLYooActionSheetElement: {
    prototype: HTMLYooActionSheetElement;
    new (): HTMLYooActionSheetElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-action-sheet': HTMLYooActionSheetElement;
  }
  interface ElementTagNameMap {
    'yoo-action-sheet': HTMLYooActionSheetElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-action-sheet': JSXElements.YooActionSheetAttributes;
    }
  }
  namespace JSXElements {
    export interface YooActionSheetAttributes extends HTMLAttributes {
      'buttons'?: IActionSheetButton[];
      'heading'?: string;
      'onActionSelected'?: (event: CustomEvent<string>) => void;
      'onActionSheetClosed'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooAlert {
      'animationName': string;
      'closeable': boolean;
      'heading': string;
      'icon': string;
      'link': string;
      'text': string;
    }
  }

  interface HTMLYooAlertElement extends StencilComponents.YooAlert, HTMLStencilElement {}

  var HTMLYooAlertElement: {
    prototype: HTMLYooAlertElement;
    new (): HTMLYooAlertElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-alert': HTMLYooAlertElement;
  }
  interface ElementTagNameMap {
    'yoo-alert': HTMLYooAlertElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-alert': JSXElements.YooAlertAttributes;
    }
  }
  namespace JSXElements {
    export interface YooAlertAttributes extends HTMLAttributes {
      'animationName'?: string;
      'closeable'?: boolean;
      'heading'?: string;
      'icon'?: string;
      'link'?: string;
      'onAlertActionSelected'?: (event: CustomEvent<boolean>) => void;
      'onAlertClosed'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooAvatar {
      'bottomLeftIcon': string;
      'bottomRightIcon': string;
      'icon': string;
      'iconText': string;
      'imgSrc': string;
      'topLeftIcon': string;
      'topRightIcon': string;
      'user': IUser;
    }
  }

  interface HTMLYooAvatarElement extends StencilComponents.YooAvatar, HTMLStencilElement {}

  var HTMLYooAvatarElement: {
    prototype: HTMLYooAvatarElement;
    new (): HTMLYooAvatarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-avatar': HTMLYooAvatarElement;
  }
  interface ElementTagNameMap {
    'yoo-avatar': HTMLYooAvatarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-avatar': JSXElements.YooAvatarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooAvatarAttributes extends HTMLAttributes {
      'bottomLeftIcon'?: string;
      'bottomRightIcon'?: string;
      'icon'?: string;
      'iconText'?: string;
      'imgSrc'?: string;
      'onBottomLeftClicked'?: (event: CustomEvent<boolean>) => void;
      'onBottomRightClicked'?: (event: CustomEvent<boolean>) => void;
      'onTopLeftClicked'?: (event: CustomEvent<boolean>) => void;
      'onTopRightClicked'?: (event: CustomEvent<boolean>) => void;
      'topLeftIcon'?: string;
      'topRightIcon'?: string;
      'user'?: IUser;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooBadge {
      'closable': boolean;
      'iconLeft': string;
      'iconRight': string;
      'text': string;
    }
  }

  interface HTMLYooBadgeElement extends StencilComponents.YooBadge, HTMLStencilElement {}

  var HTMLYooBadgeElement: {
    prototype: HTMLYooBadgeElement;
    new (): HTMLYooBadgeElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-badge': HTMLYooBadgeElement;
  }
  interface ElementTagNameMap {
    'yoo-badge': HTMLYooBadgeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-badge': JSXElements.YooBadgeAttributes;
    }
  }
  namespace JSXElements {
    export interface YooBadgeAttributes extends HTMLAttributes {
      'closable'?: boolean;
      'iconLeft'?: string;
      'iconRight'?: string;
      'onLeftIconClicked'?: (event: CustomEvent<boolean>) => void;
      'onRightIconClicked'?: (event: CustomEvent<boolean>) => void;
      'onTagClosed'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooBreadcrumbs {
      'items': string[];
    }
  }

  interface HTMLYooBreadcrumbsElement extends StencilComponents.YooBreadcrumbs, HTMLStencilElement {}

  var HTMLYooBreadcrumbsElement: {
    prototype: HTMLYooBreadcrumbsElement;
    new (): HTMLYooBreadcrumbsElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-breadcrumbs': HTMLYooBreadcrumbsElement;
  }
  interface ElementTagNameMap {
    'yoo-breadcrumbs': HTMLYooBreadcrumbsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-breadcrumbs': JSXElements.YooBreadcrumbsAttributes;
    }
  }
  namespace JSXElements {
    export interface YooBreadcrumbsAttributes extends HTMLAttributes {
      'items'?: string[];
      'onItemSelected'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooButtonContent {
      'disabled': boolean;
      'icon': string;
      'isLoading': boolean;
      'text': string;
    }
  }

  interface HTMLYooButtonContentElement extends StencilComponents.YooButtonContent, HTMLStencilElement {}

  var HTMLYooButtonContentElement: {
    prototype: HTMLYooButtonContentElement;
    new (): HTMLYooButtonContentElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-button-content': HTMLYooButtonContentElement;
  }
  interface ElementTagNameMap {
    'yoo-button-content': HTMLYooButtonContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-button-content': JSXElements.YooButtonContentAttributes;
    }
  }
  namespace JSXElements {
    export interface YooButtonContentAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'icon'?: string;
      'isLoading'?: boolean;
      'onButtonClicked'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooButtonGroup {
      'dropdownTitle': string;
      'isDropdown': boolean;
    }
  }

  interface HTMLYooButtonGroupElement extends StencilComponents.YooButtonGroup, HTMLStencilElement {}

  var HTMLYooButtonGroupElement: {
    prototype: HTMLYooButtonGroupElement;
    new (): HTMLYooButtonGroupElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-button-group': HTMLYooButtonGroupElement;
  }
  interface ElementTagNameMap {
    'yoo-button-group': HTMLYooButtonGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-button-group': JSXElements.YooButtonGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface YooButtonGroupAttributes extends HTMLAttributes {
      'dropdownTitle'?: string;
      'isDropdown'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooButton {
      'disabled': boolean;
      'icon': string;
      'isLoading': boolean;
      'text': string;
    }
  }

  interface HTMLYooButtonElement extends StencilComponents.YooButton, HTMLStencilElement {}

  var HTMLYooButtonElement: {
    prototype: HTMLYooButtonElement;
    new (): HTMLYooButtonElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-button': HTMLYooButtonElement;
  }
  interface ElementTagNameMap {
    'yoo-button': HTMLYooButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-button': JSXElements.YooButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface YooButtonAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'icon'?: string;
      'isLoading'?: boolean;
      'onButtonClicked'?: (event: CustomEvent<boolean>) => void;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooCalendar {
      'activeDay': Date;
      'displayMode': 'month' | 'week';
      'extraMarkers': ICalendarMarker[];
      'markers': ICalendarMarker[];
      'markersNoCount': Array<{ _id: string}>;
    }
  }

  interface HTMLYooCalendarElement extends StencilComponents.YooCalendar, HTMLStencilElement {}

  var HTMLYooCalendarElement: {
    prototype: HTMLYooCalendarElement;
    new (): HTMLYooCalendarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-calendar': HTMLYooCalendarElement;
  }
  interface ElementTagNameMap {
    'yoo-calendar': HTMLYooCalendarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-calendar': JSXElements.YooCalendarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooCalendarAttributes extends HTMLAttributes {
      'activeDay'?: Date;
      'displayMode'?: 'month' | 'week';
      'extraMarkers'?: ICalendarMarker[];
      'markers'?: ICalendarMarker[];
      'markersNoCount'?: Array<{ _id: string}>;
      'onDateChanged'?: (event: CustomEvent<IDateChange>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooChat {
      'displayLoadMore': boolean;
      'heading': string;
      'messages': IChatMessage[];
      'resize': (windowEvent?: boolean) => void;
      'scrollToBottom': () => void;
      'scrollToTop': () => void;
    }
  }

  interface HTMLYooChatElement extends StencilComponents.YooChat, HTMLStencilElement {}

  var HTMLYooChatElement: {
    prototype: HTMLYooChatElement;
    new (): HTMLYooChatElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-chat': HTMLYooChatElement;
  }
  interface ElementTagNameMap {
    'yoo-chat': HTMLYooChatElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-chat': JSXElements.YooChatAttributes;
    }
  }
  namespace JSXElements {
    export interface YooChatAttributes extends HTMLAttributes {
      'displayLoadMore'?: boolean;
      'heading'?: string;
      'messages'?: IChatMessage[];
      'onLoadMoreClicked'?: (event: CustomEvent<boolean>) => void;
      'onSendText'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooContextMenu {
      'close': () => void;
      'context': any;
      'items': Array<IContextMenuEntry>;
      'open': () => void;
    }
  }

  interface HTMLYooContextMenuElement extends StencilComponents.YooContextMenu, HTMLStencilElement {}

  var HTMLYooContextMenuElement: {
    prototype: HTMLYooContextMenuElement;
    new (): HTMLYooContextMenuElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-context-menu': HTMLYooContextMenuElement;
  }
  interface ElementTagNameMap {
    'yoo-context-menu': HTMLYooContextMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-context-menu': JSXElements.YooContextMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface YooContextMenuAttributes extends HTMLAttributes {
      'context'?: any;
      'items'?: Array<IContextMenuEntry>;
      'onContextMenuClosed'?: (event: CustomEvent<boolean>) => void;
      'onContextMenuOpened'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooDevice {
      'heading': string;
      'hideBar': boolean;
    }
  }

  interface HTMLYooDeviceElement extends StencilComponents.YooDevice, HTMLStencilElement {}

  var HTMLYooDeviceElement: {
    prototype: HTMLYooDeviceElement;
    new (): HTMLYooDeviceElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-device': HTMLYooDeviceElement;
  }
  interface ElementTagNameMap {
    'yoo-device': HTMLYooDeviceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-device': JSXElements.YooDeviceAttributes;
    }
  }
  namespace JSXElements {
    export interface YooDeviceAttributes extends HTMLAttributes {
      'heading'?: string;
      'hideBar'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooEmptyState {
      'type': string;
    }
  }

  interface HTMLYooEmptyStateElement extends StencilComponents.YooEmptyState, HTMLStencilElement {}

  var HTMLYooEmptyStateElement: {
    prototype: HTMLYooEmptyStateElement;
    new (): HTMLYooEmptyStateElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-empty-state': HTMLYooEmptyStateElement;
  }
  interface ElementTagNameMap {
    'yoo-empty-state': HTMLYooEmptyStateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-empty-state': JSXElements.YooEmptyStateAttributes;
    }
  }
  namespace JSXElements {
    export interface YooEmptyStateAttributes extends HTMLAttributes {
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFabButton {
      'activated': boolean;
      'disabled': boolean;
      'fabEntry': FabButtonEntry;
      'icon': string;
      'label': string;
      'parentHasList': boolean;
      'text': string;
      'toggleActive': Function;
    }
  }

  interface HTMLYooFabButtonElement extends StencilComponents.YooFabButton, HTMLStencilElement {}

  var HTMLYooFabButtonElement: {
    prototype: HTMLYooFabButtonElement;
    new (): HTMLYooFabButtonElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-fab-button': HTMLYooFabButtonElement;
  }
  interface ElementTagNameMap {
    'yoo-fab-button': HTMLYooFabButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-fab-button': JSXElements.YooFabButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFabButtonAttributes extends HTMLAttributes {
      'activated'?: boolean;
      'disabled'?: boolean;
      'fabEntry'?: FabButtonEntry;
      'icon'?: string;
      'label'?: string;
      'parentHasList'?: boolean;
      'text'?: string;
      'toggleActive'?: Function;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFabContainer {
      'animated': boolean;
    }
  }

  interface HTMLYooFabContainerElement extends StencilComponents.YooFabContainer, HTMLStencilElement {}

  var HTMLYooFabContainerElement: {
    prototype: HTMLYooFabContainerElement;
    new (): HTMLYooFabContainerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-fab-container': HTMLYooFabContainerElement;
  }
  interface ElementTagNameMap {
    'yoo-fab-container': HTMLYooFabContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-fab-container': JSXElements.YooFabContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFabContainerAttributes extends HTMLAttributes {
      'animated'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFabList {
      'activated': boolean;
      'animated': boolean;
      'mini': boolean;
      'side': string;
    }
  }

  interface HTMLYooFabListElement extends StencilComponents.YooFabList, HTMLStencilElement {}

  var HTMLYooFabListElement: {
    prototype: HTMLYooFabListElement;
    new (): HTMLYooFabListElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-fab-list': HTMLYooFabListElement;
  }
  interface ElementTagNameMap {
    'yoo-fab-list': HTMLYooFabListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-fab-list': JSXElements.YooFabListAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFabListAttributes extends HTMLAttributes {
      'activated'?: boolean;
      'animated'?: boolean;
      'mini'?: boolean;
      'side'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooInputBar {
      'actionText': string;
      'focusInputField': () => void;
      'icon': string;
      'iconAction': string;
      'placeholder': string;
      'replyToUser': IUser;
      'topIndication': string;
      'value': string;
    }
  }

  interface HTMLYooInputBarElement extends StencilComponents.YooInputBar, HTMLStencilElement {}

  var HTMLYooInputBarElement: {
    prototype: HTMLYooInputBarElement;
    new (): HTMLYooInputBarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-input-bar': HTMLYooInputBarElement;
  }
  interface ElementTagNameMap {
    'yoo-input-bar': HTMLYooInputBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-input-bar': JSXElements.YooInputBarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooInputBarAttributes extends HTMLAttributes {
      'actionText'?: string;
      'icon'?: string;
      'iconAction'?: string;
      'onBrowseLibrary'?: (event: CustomEvent<boolean>) => void;
      'onIconClicked'?: (event: CustomEvent<boolean>) => void;
      'onRowNumberChanged'?: (event: CustomEvent<boolean>) => void;
      'onSendText'?: (event: CustomEvent<string>) => void;
      'placeholder'?: string;
      'replyToUser'?: IUser;
      'topIndication'?: string;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooLoader {

    }
  }

  interface HTMLYooLoaderElement extends StencilComponents.YooLoader, HTMLStencilElement {}

  var HTMLYooLoaderElement: {
    prototype: HTMLYooLoaderElement;
    new (): HTMLYooLoaderElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-loader': HTMLYooLoaderElement;
  }
  interface ElementTagNameMap {
    'yoo-loader': HTMLYooLoaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-loader': JSXElements.YooLoaderAttributes;
    }
  }
  namespace JSXElements {
    export interface YooLoaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ModalContent {

    }
  }

  interface HTMLModalContentElement extends StencilComponents.ModalContent, HTMLStencilElement {}

  var HTMLModalContentElement: {
    prototype: HTMLModalContentElement;
    new (): HTMLModalContentElement;
  };
  interface HTMLElementTagNameMap {
    'modal-content': HTMLModalContentElement;
  }
  interface ElementTagNameMap {
    'modal-content': HTMLModalContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'modal-content': JSXElements.ModalContentAttributes;
    }
  }
  namespace JSXElements {
    export interface ModalContentAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooModalController {
      'closeActionSheet': () => void;
      'closeAlert': (alert: any) => void;
      'closeModal': (sentFromModal: boolean) => void;
      'confirm': (customController?: boolean, cssClass?: string) => void;
      'generateActionSheet': (props: IActionSheet) => void;
      'generateAlert': (props: IAlertEntry) => void;
      'generateLanguageSelector': (props: ILanguageSelector) => void;
      'generateModal': (props: IModalEntry) => void;
      'greyContent': boolean;
      'populateModal': (modal: HTMLElement) => void;
      'show': () => void;
      'showActionSheet': () => void;
      'showAlert': () => void;
    }
  }

  interface HTMLYooModalControllerElement extends StencilComponents.YooModalController, HTMLStencilElement {}

  var HTMLYooModalControllerElement: {
    prototype: HTMLYooModalControllerElement;
    new (): HTMLYooModalControllerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-modal-controller': HTMLYooModalControllerElement;
  }
  interface ElementTagNameMap {
    'yoo-modal-controller': HTMLYooModalControllerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-modal-controller': JSXElements.YooModalControllerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooModalControllerAttributes extends HTMLAttributes {
      'greyContent'?: boolean;
      'onModalCtrlPrimaryButtonClicked'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ModalTrigger {

    }
  }

  interface HTMLModalTriggerElement extends StencilComponents.ModalTrigger, HTMLStencilElement {}

  var HTMLModalTriggerElement: {
    prototype: HTMLModalTriggerElement;
    new (): HTMLModalTriggerElement;
  };
  interface HTMLElementTagNameMap {
    'modal-trigger': HTMLModalTriggerElement;
  }
  interface ElementTagNameMap {
    'modal-trigger': HTMLModalTriggerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'modal-trigger': JSXElements.ModalTriggerAttributes;
    }
  }
  namespace JSXElements {
    export interface ModalTriggerAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooModal {
      'animationName': string;
      'animationProp': IAnimationProp;
      'close': () => void;
      'content': HTMLElement;
      'cssClass': string;
      'footerText': string;
      'hasFooter': boolean;
      'hasHeader': boolean;
      'heading': string;
      'headingIcon': string;
      'primaryButtonText': string;
      'primaryFn': Function;
      'resize': () => void;
      'scrollEnabled': boolean;
      'secondaryButtonText': string;
      'withYooCtrl': boolean;
    }
  }

  interface HTMLYooModalElement extends StencilComponents.YooModal, HTMLStencilElement {}

  var HTMLYooModalElement: {
    prototype: HTMLYooModalElement;
    new (): HTMLYooModalElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-modal': HTMLYooModalElement;
  }
  interface ElementTagNameMap {
    'yoo-modal': HTMLYooModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-modal': JSXElements.YooModalAttributes;
    }
  }
  namespace JSXElements {
    export interface YooModalAttributes extends HTMLAttributes {
      'animationName'?: string;
      'animationProp'?: IAnimationProp;
      'content'?: HTMLElement;
      'cssClass'?: string;
      'footerText'?: string;
      'hasFooter'?: boolean;
      'hasHeader'?: boolean;
      'heading'?: string;
      'headingIcon'?: string;
      'onClosed'?: (event: CustomEvent<boolean>) => void;
      'onPrimaryButtonClicked'?: (event: CustomEvent<boolean>) => void;
      'primaryButtonText'?: string;
      'primaryFn'?: Function;
      'scrollEnabled'?: boolean;
      'secondaryButtonText'?: string;
      'withYooCtrl'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooNavbar {
      'actionBtnText': string;
      'animationOnLoadTime': number;
      'selectedTab': INavBarTab;
      'tabs': Array<INavBarTab>;
      'withLine': boolean;
    }
  }

  interface HTMLYooNavbarElement extends StencilComponents.YooNavbar, HTMLStencilElement {}

  var HTMLYooNavbarElement: {
    prototype: HTMLYooNavbarElement;
    new (): HTMLYooNavbarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-navbar': HTMLYooNavbarElement;
  }
  interface ElementTagNameMap {
    'yoo-navbar': HTMLYooNavbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-navbar': JSXElements.YooNavbarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooNavbarAttributes extends HTMLAttributes {
      'actionBtnText'?: string;
      'animationOnLoadTime'?: number;
      'onActionButtonClicked'?: (event: CustomEvent<boolean>) => void;
      'onTabSelected'?: (event: CustomEvent<INavBarTab>) => void;
      'onTabSelectedIsToRight'?: (event: CustomEvent<boolean>) => void;
      'selectedTab'?: INavBarTab;
      'tabs'?: Array<INavBarTab>;
      'withLine'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooPagination {
      'currentPage': number;
      'itemsPerPage': number;
      'maxPagerSize': number;
      'showTotal': boolean;
      'totalItems': number;
    }
  }

  interface HTMLYooPaginationElement extends StencilComponents.YooPagination, HTMLStencilElement {}

  var HTMLYooPaginationElement: {
    prototype: HTMLYooPaginationElement;
    new (): HTMLYooPaginationElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-pagination': HTMLYooPaginationElement;
  }
  interface ElementTagNameMap {
    'yoo-pagination': HTMLYooPaginationElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-pagination': JSXElements.YooPaginationAttributes;
    }
  }
  namespace JSXElements {
    export interface YooPaginationAttributes extends HTMLAttributes {
      'currentPage'?: number;
      'itemsPerPage'?: number;
      'maxPagerSize'?: number;
      'onItemsPerPageChanged'?: (event: CustomEvent<number>) => void;
      'onPageChanged'?: (event: CustomEvent<any>) => void;
      'showTotal'?: boolean;
      'totalItems'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooPanel {
      'height': number;
      'width': number;
    }
  }

  interface HTMLYooPanelElement extends StencilComponents.YooPanel, HTMLStencilElement {}

  var HTMLYooPanelElement: {
    prototype: HTMLYooPanelElement;
    new (): HTMLYooPanelElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-panel': HTMLYooPanelElement;
  }
  interface ElementTagNameMap {
    'yoo-panel': HTMLYooPanelElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-panel': JSXElements.YooPanelAttributes;
    }
  }
  namespace JSXElements {
    export interface YooPanelAttributes extends HTMLAttributes {
      'height'?: number;
      'width'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooProgressBar {
      'circle': boolean;
      'circleLabel': string;
      'circleTitle': string;
      'hideProgress': boolean;
      'maxValue': number;
      'percentage': boolean;
      'progress': number;
      'triangleBackgroundColor': string;
    }
  }

  interface HTMLYooProgressBarElement extends StencilComponents.YooProgressBar, HTMLStencilElement {}

  var HTMLYooProgressBarElement: {
    prototype: HTMLYooProgressBarElement;
    new (): HTMLYooProgressBarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-progress-bar': HTMLYooProgressBarElement;
  }
  interface ElementTagNameMap {
    'yoo-progress-bar': HTMLYooProgressBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-progress-bar': JSXElements.YooProgressBarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooProgressBarAttributes extends HTMLAttributes {
      'circle'?: boolean;
      'circleLabel'?: string;
      'circleTitle'?: string;
      'hideProgress'?: boolean;
      'maxValue'?: number;
      'percentage'?: boolean;
      'progress'?: number;
      'triangleBackgroundColor'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooPropertyCard {
      'properties': any;
    }
  }

  interface HTMLYooPropertyCardElement extends StencilComponents.YooPropertyCard, HTMLStencilElement {}

  var HTMLYooPropertyCardElement: {
    prototype: HTMLYooPropertyCardElement;
    new (): HTMLYooPropertyCardElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-property-card': HTMLYooPropertyCardElement;
  }
  interface ElementTagNameMap {
    'yoo-property-card': HTMLYooPropertyCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-property-card': JSXElements.YooPropertyCardAttributes;
    }
  }
  namespace JSXElements {
    export interface YooPropertyCardAttributes extends HTMLAttributes {
      'properties'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooScrollSpy {
      'repeat': boolean;
    }
  }

  interface HTMLYooScrollSpyElement extends StencilComponents.YooScrollSpy, HTMLStencilElement {}

  var HTMLYooScrollSpyElement: {
    prototype: HTMLYooScrollSpyElement;
    new (): HTMLYooScrollSpyElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-scroll-spy': HTMLYooScrollSpyElement;
  }
  interface ElementTagNameMap {
    'yoo-scroll-spy': HTMLYooScrollSpyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-scroll-spy': JSXElements.YooScrollSpyAttributes;
    }
  }
  namespace JSXElements {
    export interface YooScrollSpyAttributes extends HTMLAttributes {
      'onEnterInView'?: (event: CustomEvent<boolean>) => void;
      'onOutOfView'?: (event: CustomEvent<boolean>) => void;
      'repeat'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooSlimScroll {
      'disable': () => void;
      'enable': () => void;
      'enabled': boolean;
      'height': string;
      'refresh': () => void;
      'scrollToBottom': (duration?: number) => void;
      'scrollToElement': (el: HTMLElement, duration?: number) => void;
      'scrollToTop': (duration?: number) => void;
      'showScrollbar': boolean;
      'width': string;
    }
  }

  interface HTMLYooSlimScrollElement extends StencilComponents.YooSlimScroll, HTMLStencilElement {}

  var HTMLYooSlimScrollElement: {
    prototype: HTMLYooSlimScrollElement;
    new (): HTMLYooSlimScrollElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-slim-scroll': HTMLYooSlimScrollElement;
  }
  interface ElementTagNameMap {
    'yoo-slim-scroll': HTMLYooSlimScrollElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-slim-scroll': JSXElements.YooSlimScrollAttributes;
    }
  }
  namespace JSXElements {
    export interface YooSlimScrollAttributes extends HTMLAttributes {
      'enabled'?: boolean;
      'height'?: string;
      'onAtBottom'?: (event: CustomEvent<boolean>) => void;
      'onAtLeft'?: (event: CustomEvent<boolean>) => void;
      'onScrollEnd'?: (event: CustomEvent<boolean>) => void;
      'onScrollStart'?: (event: CustomEvent<boolean>) => void;
      'showScrollbar'?: boolean;
      'width'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooSticky {
      'bottom': string;
      'top': string;
    }
  }

  interface HTMLYooStickyElement extends StencilComponents.YooSticky, HTMLStencilElement {}

  var HTMLYooStickyElement: {
    prototype: HTMLYooStickyElement;
    new (): HTMLYooStickyElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-sticky': HTMLYooStickyElement;
  }
  interface ElementTagNameMap {
    'yoo-sticky': HTMLYooStickyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-sticky': JSXElements.YooStickyAttributes;
    }
  }
  namespace JSXElements {
    export interface YooStickyAttributes extends HTMLAttributes {
      'bottom'?: string;
      'top'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTabs {
      'numberTabsDisplayed': number;
      'selected': number;
      'titles': string[];
    }
  }

  interface HTMLYooTabsElement extends StencilComponents.YooTabs, HTMLStencilElement {}

  var HTMLYooTabsElement: {
    prototype: HTMLYooTabsElement;
    new (): HTMLYooTabsElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-tabs': HTMLYooTabsElement;
  }
  interface ElementTagNameMap {
    'yoo-tabs': HTMLYooTabsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-tabs': JSXElements.YooTabsAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTabsAttributes extends HTMLAttributes {
      'numberTabsDisplayed'?: number;
      'onTabChanged'?: (event: CustomEvent<string>) => void;
      'selected'?: number;
      'titles'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTile {
      'icon': string;
      'text': string;
      'textClass': string;
      'value': string;
    }
  }

  interface HTMLYooTileElement extends StencilComponents.YooTile, HTMLStencilElement {}

  var HTMLYooTileElement: {
    prototype: HTMLYooTileElement;
    new (): HTMLYooTileElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-tile': HTMLYooTileElement;
  }
  interface ElementTagNameMap {
    'yoo-tile': HTMLYooTileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-tile': JSXElements.YooTileAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTileAttributes extends HTMLAttributes {
      'icon'?: string;
      'text'?: string;
      'textClass'?: string;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooToolbar {
      'actions': IActionBar[];
      'showActive': boolean;
    }
  }

  interface HTMLYooToolbarElement extends StencilComponents.YooToolbar, HTMLStencilElement {}

  var HTMLYooToolbarElement: {
    prototype: HTMLYooToolbarElement;
    new (): HTMLYooToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-toolbar': HTMLYooToolbarElement;
  }
  interface ElementTagNameMap {
    'yoo-toolbar': HTMLYooToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-toolbar': JSXElements.YooToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface YooToolbarAttributes extends HTMLAttributes {
      'actions'?: IActionBar[];
      'showActive'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTooltip {
      'options': any;
      'placement': 'top' | 'bottom' | 'left' | 'right' | 'top-start' | 'top-end';
      'text': string;
    }
  }

  interface HTMLYooTooltipElement extends StencilComponents.YooTooltip, HTMLStencilElement {}

  var HTMLYooTooltipElement: {
    prototype: HTMLYooTooltipElement;
    new (): HTMLYooTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-tooltip': HTMLYooTooltipElement;
  }
  interface ElementTagNameMap {
    'yoo-tooltip': HTMLYooTooltipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-tooltip': JSXElements.YooTooltipAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTooltipAttributes extends HTMLAttributes {
      'options'?: any;
      'placement'?: 'top' | 'bottom' | 'left' | 'right' | 'top-start' | 'top-end';
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooTransition {
      'heading': string;
      'icon': string;
      'image': string;
      'subHeading': string;
      'type': 'fade' | 'bottom' | 'icon' | 'image' | 'heading' | 'scale-up';
    }
  }

  interface HTMLYooTransitionElement extends StencilComponents.YooTransition, HTMLStencilElement {}

  var HTMLYooTransitionElement: {
    prototype: HTMLYooTransitionElement;
    new (): HTMLYooTransitionElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-transition': HTMLYooTransitionElement;
  }
  interface ElementTagNameMap {
    'yoo-transition': HTMLYooTransitionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-transition': JSXElements.YooTransitionAttributes;
    }
  }
  namespace JSXElements {
    export interface YooTransitionAttributes extends HTMLAttributes {
      'heading'?: string;
      'icon'?: string;
      'image'?: string;
      'subHeading'?: string;
      'type'?: 'fade' | 'bottom' | 'icon' | 'image' | 'heading' | 'scale-up';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooVerticalMenu {
      'entry': IVerticalMenuEntry;
      'fixed': boolean;
      'heading': string;
      'imgSrc': string;
      'setItemActive': (menuItem: IVerticalMenuItem) => void;
    }
  }

  interface HTMLYooVerticalMenuElement extends StencilComponents.YooVerticalMenu, HTMLStencilElement {}

  var HTMLYooVerticalMenuElement: {
    prototype: HTMLYooVerticalMenuElement;
    new (): HTMLYooVerticalMenuElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-vertical-menu': HTMLYooVerticalMenuElement;
  }
  interface ElementTagNameMap {
    'yoo-vertical-menu': HTMLYooVerticalMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-vertical-menu': JSXElements.YooVerticalMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface YooVerticalMenuAttributes extends HTMLAttributes {
      'entry'?: IVerticalMenuEntry;
      'fixed'?: boolean;
      'heading'?: string;
      'imgSrc'?: string;
      'onItemClicked'?: (event: CustomEvent<IVerticalMenuItem>) => void;
      'onMenuClosed'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooWebMenu {
      'activePage': string;
      'entry': IWebMenuEntry;
      'resize': () => void;
    }
  }

  interface HTMLYooWebMenuElement extends StencilComponents.YooWebMenu, HTMLStencilElement {}

  var HTMLYooWebMenuElement: {
    prototype: HTMLYooWebMenuElement;
    new (): HTMLYooWebMenuElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-web-menu': HTMLYooWebMenuElement;
  }
  interface ElementTagNameMap {
    'yoo-web-menu': HTMLYooWebMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-web-menu': JSXElements.YooWebMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface YooWebMenuAttributes extends HTMLAttributes {
      'activePage'?: string;
      'entry'?: IWebMenuEntry;
      'onItemClicked'?: (event: CustomEvent<any>) => void;
      'onProfilClicked'?: (event: CustomEvent<any>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooZoom {

    }
  }

  interface HTMLYooZoomElement extends StencilComponents.YooZoom, HTMLStencilElement {}

  var HTMLYooZoomElement: {
    prototype: HTMLYooZoomElement;
    new (): HTMLYooZoomElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-zoom': HTMLYooZoomElement;
  }
  interface ElementTagNameMap {
    'yoo-zoom': HTMLYooZoomElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-zoom': JSXElements.YooZoomAttributes;
    }
  }
  namespace JSXElements {
    export interface YooZoomAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooCardFeed {
      'entry': ICardEntry;
    }
  }

  interface HTMLYooCardFeedElement extends StencilComponents.YooCardFeed, HTMLStencilElement {}

  var HTMLYooCardFeedElement: {
    prototype: HTMLYooCardFeedElement;
    new (): HTMLYooCardFeedElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-card-feed': HTMLYooCardFeedElement;
  }
  interface ElementTagNameMap {
    'yoo-card-feed': HTMLYooCardFeedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-card-feed': JSXElements.YooCardFeedAttributes;
    }
  }
  namespace JSXElements {
    export interface YooCardFeedAttributes extends HTMLAttributes {
      'entry'?: ICardEntry;
      'onBottomActionClicked'?: (event: CustomEvent<boolean>) => void;
      'onGroupClicked'?: (event: CustomEvent<any>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooCardFile {
      'heading': string;
      'icon': string;
      'iconClass': string;
      'isClosable': boolean;
      'subheading': string;
    }
  }

  interface HTMLYooCardFileElement extends StencilComponents.YooCardFile, HTMLStencilElement {}

  var HTMLYooCardFileElement: {
    prototype: HTMLYooCardFileElement;
    new (): HTMLYooCardFileElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-card-file': HTMLYooCardFileElement;
  }
  interface ElementTagNameMap {
    'yoo-card-file': HTMLYooCardFileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-card-file': JSXElements.YooCardFileAttributes;
    }
  }
  namespace JSXElements {
    export interface YooCardFileAttributes extends HTMLAttributes {
      'heading'?: string;
      'icon'?: string;
      'iconClass'?: string;
      'isClosable'?: boolean;
      'subheading'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooCardList {
      'actionButtonTitle': string;
      'animationName': string;
      'avatarImgs': string[];
      'entry': ICardListEntry;
      'hasMenu': boolean;
      'isActivable': boolean;
    }
  }

  interface HTMLYooCardListElement extends StencilComponents.YooCardList, HTMLStencilElement {}

  var HTMLYooCardListElement: {
    prototype: HTMLYooCardListElement;
    new (): HTMLYooCardListElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-card-list': HTMLYooCardListElement;
  }
  interface ElementTagNameMap {
    'yoo-card-list': HTMLYooCardListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-card-list': JSXElements.YooCardListAttributes;
    }
  }
  namespace JSXElements {
    export interface YooCardListAttributes extends HTMLAttributes {
      'actionButtonTitle'?: string;
      'animationName'?: string;
      'avatarImgs'?: string[];
      'entry'?: ICardListEntry;
      'hasMenu'?: boolean;
      'isActivable'?: boolean;
      'onActionPress'?: (event: CustomEvent<boolean>) => void;
      'onActive'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooCardPlaceholder {
      'displayType': CardType;
      'entityType': EntityType;
    }
  }

  interface HTMLYooCardPlaceholderElement extends StencilComponents.YooCardPlaceholder, HTMLStencilElement {}

  var HTMLYooCardPlaceholderElement: {
    prototype: HTMLYooCardPlaceholderElement;
    new (): HTMLYooCardPlaceholderElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-card-placeholder': HTMLYooCardPlaceholderElement;
  }
  interface ElementTagNameMap {
    'yoo-card-placeholder': HTMLYooCardPlaceholderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-card-placeholder': JSXElements.YooCardPlaceholderAttributes;
    }
  }
  namespace JSXElements {
    export interface YooCardPlaceholderAttributes extends HTMLAttributes {
      'displayType'?: CardType;
      'entityType'?: EntityType;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooCardSticky {
      'entry': ICardStickyEntry;
    }
  }

  interface HTMLYooCardStickyElement extends StencilComponents.YooCardSticky, HTMLStencilElement {}

  var HTMLYooCardStickyElement: {
    prototype: HTMLYooCardStickyElement;
    new (): HTMLYooCardStickyElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-card-sticky': HTMLYooCardStickyElement;
  }
  interface ElementTagNameMap {
    'yoo-card-sticky': HTMLYooCardStickyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-card-sticky': JSXElements.YooCardStickyAttributes;
    }
  }
  namespace JSXElements {
    export interface YooCardStickyAttributes extends HTMLAttributes {
      'entry'?: ICardStickyEntry;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooCard {
      'actionButtonTitle': string;
      'animationName': string;
      'avatarImgs': string[];
      'avatarShape': string;
      'badges': IBadgeEntry[];
      'bottomLeftBadge': string;
      'bottomRightBadge': string;
      'date': string;
      'hasMenu': boolean;
      'heading': string;
      'imgSrc': string;
      'isActivable': boolean;
      'isUserCard': boolean;
      'subheadings': string[];
      'topLeftBadge': string;
      'topRightBadge': string;
    }
  }

  interface HTMLYooCardElement extends StencilComponents.YooCard, HTMLStencilElement {}

  var HTMLYooCardElement: {
    prototype: HTMLYooCardElement;
    new (): HTMLYooCardElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-card': HTMLYooCardElement;
  }
  interface ElementTagNameMap {
    'yoo-card': HTMLYooCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-card': JSXElements.YooCardAttributes;
    }
  }
  namespace JSXElements {
    export interface YooCardAttributes extends HTMLAttributes {
      'actionButtonTitle'?: string;
      'animationName'?: string;
      'avatarImgs'?: string[];
      'avatarShape'?: string;
      'badges'?: IBadgeEntry[];
      'bottomLeftBadge'?: string;
      'bottomRightBadge'?: string;
      'date'?: string;
      'hasMenu'?: boolean;
      'heading'?: string;
      'imgSrc'?: string;
      'isActivable'?: boolean;
      'isUserCard'?: boolean;
      'onActionPress'?: (event: CustomEvent<boolean>) => void;
      'onActive'?: (event: CustomEvent<boolean>) => void;
      'subheadings'?: string[];
      'topLeftBadge'?: string;
      'topRightBadge'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooEntity {
      'bottomActions': Array<IEntityAction>;
      'displayType': CardType;
      'entityType': EntityType;
      'icons': Array<IEntityAction>;
      'item': any;
      'secondaryActions': Array<IEntityAction>;
      'topActions': Array<IEntityAction>;
      'useTranslate': boolean;
    }
  }

  interface HTMLYooEntityElement extends StencilComponents.YooEntity, HTMLStencilElement {}

  var HTMLYooEntityElement: {
    prototype: HTMLYooEntityElement;
    new (): HTMLYooEntityElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-entity': HTMLYooEntityElement;
  }
  interface ElementTagNameMap {
    'yoo-entity': HTMLYooEntityElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-entity': JSXElements.YooEntityAttributes;
    }
  }
  namespace JSXElements {
    export interface YooEntityAttributes extends HTMLAttributes {
      'bottomActions'?: Array<IEntityAction>;
      'displayType'?: CardType;
      'entityType'?: EntityType;
      'icons'?: Array<IEntityAction>;
      'item'?: any;
      'secondaryActions'?: Array<IEntityAction>;
      'topActions'?: Array<IEntityAction>;
      'useTranslate'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFeedComments {

    }
  }

  interface HTMLYooFeedCommentsElement extends StencilComponents.YooFeedComments, HTMLStencilElement {}

  var HTMLYooFeedCommentsElement: {
    prototype: HTMLYooFeedCommentsElement;
    new (): HTMLYooFeedCommentsElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-feed-comments': HTMLYooFeedCommentsElement;
  }
  interface ElementTagNameMap {
    'yoo-feed-comments': HTMLYooFeedCommentsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-feed-comments': JSXElements.YooFeedCommentsAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFeedCommentsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFeedDetail {
      'feed': IFeed;
    }
  }

  interface HTMLYooFeedDetailElement extends StencilComponents.YooFeedDetail, HTMLStencilElement {}

  var HTMLYooFeedDetailElement: {
    prototype: HTMLYooFeedDetailElement;
    new (): HTMLYooFeedDetailElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-feed-detail': HTMLYooFeedDetailElement;
  }
  interface ElementTagNameMap {
    'yoo-feed-detail': HTMLYooFeedDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-feed-detail': JSXElements.YooFeedDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFeedDetailAttributes extends HTMLAttributes {
      'feed'?: IFeed;
      'onCommentClicked'?: (event: CustomEvent<boolean>) => void;
      'onCommentCountClicked'?: (event: CustomEvent<boolean>) => void;
      'onGroupClicked'?: (event: CustomEvent<any>) => void;
      'onImageClicked'?: (event: CustomEvent<boolean>) => void;
      'onLikeClicked'?: (event: CustomEvent<boolean>) => void;
      'onLikeCountClicked'?: (event: CustomEvent<boolean>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooMissionDetail {
      'mission': IMission;
      'photosNumber': number;
      'questionsNumber': number;
      'resize': () => void;
      'slidesNumber': number;
    }
  }

  interface HTMLYooMissionDetailElement extends StencilComponents.YooMissionDetail, HTMLStencilElement {}

  var HTMLYooMissionDetailElement: {
    prototype: HTMLYooMissionDetailElement;
    new (): HTMLYooMissionDetailElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-mission-detail': HTMLYooMissionDetailElement;
  }
  interface ElementTagNameMap {
    'yoo-mission-detail': HTMLYooMissionDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-mission-detail': JSXElements.YooMissionDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface YooMissionDetailAttributes extends HTMLAttributes {
      'mission'?: IMission;
      'onBook'?: (event: CustomEvent<string>) => void;
      'photosNumber'?: number;
      'questionsNumber'?: number;
      'slidesNumber'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooMissionResults {
      'mission': IMission;
    }
  }

  interface HTMLYooMissionResultsElement extends StencilComponents.YooMissionResults, HTMLStencilElement {}

  var HTMLYooMissionResultsElement: {
    prototype: HTMLYooMissionResultsElement;
    new (): HTMLYooMissionResultsElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-mission-results': HTMLYooMissionResultsElement;
  }
  interface ElementTagNameMap {
    'yoo-mission-results': HTMLYooMissionResultsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-mission-results': JSXElements.YooMissionResultsAttributes;
    }
  }
  namespace JSXElements {
    export interface YooMissionResultsAttributes extends HTMLAttributes {
      'mission'?: IMission;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormAutocomplete {
      'asyncValidators': Array<AsyncValidator<any>>;
      'displayType': CardType;
      'entityType': EntityType;
      'isValid': () => boolean;
      'multiple': boolean;
      'pageSize': number;
      'placeholder': string;
      'readonly': boolean;
      'required': boolean;
      'useTranslate': boolean;
      'validators': Array<Validator<any> | ValidatorEntry>;
      'value': Array<any>;
      'values': any[];
    }
  }

  interface HTMLYooFormAutocompleteElement extends StencilComponents.YooFormAutocomplete, HTMLStencilElement {}

  var HTMLYooFormAutocompleteElement: {
    prototype: HTMLYooFormAutocompleteElement;
    new (): HTMLYooFormAutocompleteElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-autocomplete': HTMLYooFormAutocompleteElement;
  }
  interface ElementTagNameMap {
    'yoo-form-autocomplete': HTMLYooFormAutocompleteElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-autocomplete': JSXElements.YooFormAutocompleteAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormAutocompleteAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<any>>;
      'displayType'?: CardType;
      'entityType'?: EntityType;
      'multiple'?: boolean;
      'onFetchData'?: (event: CustomEvent<IGridSearch>) => void;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'pageSize'?: number;
      'placeholder'?: string;
      'readonly'?: boolean;
      'required'?: boolean;
      'useTranslate'?: boolean;
      'validators'?: Array<Validator<any> | ValidatorEntry>;
      'value'?: Array<any>;
      'values'?: any[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormButtonChoice {
      'asyncValidators': Array<AsyncValidator<string[]>>;
      'multiple': boolean;
      'readonly': boolean;
      'required': boolean;
      'useTranslate': boolean;
      'validators': Array<Validator<string[]> | ValidatorEntry>;
      'value': Array<string> | string;
      'values': string[];
    }
  }

  interface HTMLYooFormButtonChoiceElement extends StencilComponents.YooFormButtonChoice, HTMLStencilElement {}

  var HTMLYooFormButtonChoiceElement: {
    prototype: HTMLYooFormButtonChoiceElement;
    new (): HTMLYooFormButtonChoiceElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-button-choice': HTMLYooFormButtonChoiceElement;
  }
  interface ElementTagNameMap {
    'yoo-form-button-choice': HTMLYooFormButtonChoiceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-button-choice': JSXElements.YooFormButtonChoiceAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormButtonChoiceAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string[]>>;
      'multiple'?: boolean;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'required'?: boolean;
      'useTranslate'?: boolean;
      'validators'?: Array<Validator<string[]> | ValidatorEntry>;
      'value'?: Array<string> | string;
      'values'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormCheckbox {
      'disabled': boolean;
      'isIndeterminate': boolean;
      'onCheckboxClick': () => void;
      'state': string;
      'text': string;
    }
  }

  interface HTMLYooFormCheckboxElement extends StencilComponents.YooFormCheckbox, HTMLStencilElement {}

  var HTMLYooFormCheckboxElement: {
    prototype: HTMLYooFormCheckboxElement;
    new (): HTMLYooFormCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-checkbox': HTMLYooFormCheckboxElement;
  }
  interface ElementTagNameMap {
    'yoo-form-checkbox': HTMLYooFormCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-checkbox': JSXElements.YooFormCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormCheckboxAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'isIndeterminate'?: boolean;
      'onCheckboxToggled'?: (event: CustomEvent<string>) => void;
      'state'?: string;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormChecklist {
      'previousTasks': Array<string>;
    }
  }

  interface HTMLYooFormChecklistElement extends StencilComponents.YooFormChecklist, HTMLStencilElement {}

  var HTMLYooFormChecklistElement: {
    prototype: HTMLYooFormChecklistElement;
    new (): HTMLYooFormChecklistElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-checklist': HTMLYooFormChecklistElement;
  }
  interface ElementTagNameMap {
    'yoo-form-checklist': HTMLYooFormChecklistElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-checklist': JSXElements.YooFormChecklistAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormChecklistAttributes extends HTMLAttributes {
      'previousTasks'?: Array<string>;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormColorPicker {
      'color': string;
      'hideLabel': boolean;
    }
  }

  interface HTMLYooFormColorPickerElement extends StencilComponents.YooFormColorPicker, HTMLStencilElement {}

  var HTMLYooFormColorPickerElement: {
    prototype: HTMLYooFormColorPickerElement;
    new (): HTMLYooFormColorPickerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-color-picker': HTMLYooFormColorPickerElement;
  }
  interface ElementTagNameMap {
    'yoo-form-color-picker': HTMLYooFormColorPickerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-color-picker': JSXElements.YooFormColorPickerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormColorPickerAttributes extends HTMLAttributes {
      'color'?: string;
      'hideLabel'?: boolean;
      'onColorSelected'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormDynamicDialog {
      'data': Object;
      'forceReadonly': boolean;
      'isValid': () => boolean;
      'showRecap': boolean;
      'showTabs': boolean;
      'slides': Array<ISlide>;
      'suffix': string;
    }
  }

  interface HTMLYooFormDynamicDialogElement extends StencilComponents.YooFormDynamicDialog, HTMLStencilElement {}

  var HTMLYooFormDynamicDialogElement: {
    prototype: HTMLYooFormDynamicDialogElement;
    new (): HTMLYooFormDynamicDialogElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-dynamic-dialog': HTMLYooFormDynamicDialogElement;
  }
  interface ElementTagNameMap {
    'yoo-form-dynamic-dialog': HTMLYooFormDynamicDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-dynamic-dialog': JSXElements.YooFormDynamicDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormDynamicDialogAttributes extends HTMLAttributes {
      'data'?: Object;
      'forceReadonly'?: boolean;
      'showRecap'?: boolean;
      'showTabs'?: boolean;
      'slides'?: Array<ISlide>;
      'suffix'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormDynamic {
      'data': Object;
      'forceFieldUpdate': (field: IFormField) => void;
      'forceReadonly': boolean;
      'goToRecap': () => void;
      'isValid': () => boolean;
      'showRecap': boolean;
      'showTabs': boolean;
      'slides': Array<ISlide>;
      'suffix': string;
    }
  }

  interface HTMLYooFormDynamicElement extends StencilComponents.YooFormDynamic, HTMLStencilElement {}

  var HTMLYooFormDynamicElement: {
    prototype: HTMLYooFormDynamicElement;
    new (): HTMLYooFormDynamicElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-dynamic': HTMLYooFormDynamicElement;
  }
  interface ElementTagNameMap {
    'yoo-form-dynamic': HTMLYooFormDynamicElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-dynamic': JSXElements.YooFormDynamicAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormDynamicAttributes extends HTMLAttributes {
      'data'?: Object;
      'forceReadonly'?: boolean;
      'onDataChanged'?: (event: CustomEvent<any>) => void;
      'onFieldFetchData'?: (event: CustomEvent<IFormSearch>) => void;
      'showRecap'?: boolean;
      'showTabs'?: boolean;
      'slides'?: Array<ISlide>;
      'suffix'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInputContainer {
      'description': string;
      'hint': string;
      'label': string;
      'required': boolean;
    }
  }

  interface HTMLYooFormInputContainerElement extends StencilComponents.YooFormInputContainer, HTMLStencilElement {}

  var HTMLYooFormInputContainerElement: {
    prototype: HTMLYooFormInputContainerElement;
    new (): HTMLYooFormInputContainerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input-container': HTMLYooFormInputContainerElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input-container': HTMLYooFormInputContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input-container': JSXElements.YooFormInputContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputContainerAttributes extends HTMLAttributes {
      'description'?: string;
      'hint'?: string;
      'label'?: string;
      'required'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInputGame {
      'fieldId': string;
      'name': string;
      'phaser': any;
    }
  }

  interface HTMLYooFormInputGameElement extends StencilComponents.YooFormInputGame, HTMLStencilElement {}

  var HTMLYooFormInputGameElement: {
    prototype: HTMLYooFormInputGameElement;
    new (): HTMLYooFormInputGameElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input-game': HTMLYooFormInputGameElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input-game': HTMLYooFormInputGameElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input-game': JSXElements.YooFormInputGameAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputGameAttributes extends HTMLAttributes {
      'fieldId'?: string;
      'name'?: string;
      'onGameOver'?: (event: CustomEvent<boolean>) => void;
      'phaser'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInputValidated {
      'asyncValidate': () => Promise<boolean>;
      'asyncValidators': Array<AsyncValidator<string>>;
      'validate': () => boolean;
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string;
    }
  }

  interface HTMLYooFormInputValidatedElement extends StencilComponents.YooFormInputValidated, HTMLStencilElement {}

  var HTMLYooFormInputValidatedElement: {
    prototype: HTMLYooFormInputValidatedElement;
    new (): HTMLYooFormInputValidatedElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input-validated': HTMLYooFormInputValidatedElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input-validated': HTMLYooFormInputValidatedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input-validated': JSXElements.YooFormInputValidatedAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputValidatedAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'onChanged'?: (event: CustomEvent<string>) => void;
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormInput {
      'asyncValidators': Array<AsyncValidator<string>>;
      'borderColor': string;
      'iconPrefix': string;
      'iconSuffix': string;
      'isValid': () => boolean;
      'placeholder': string;
      'placeholdertolabel': boolean;
      'readonly': boolean;
      'required': boolean;
      'showInputClear': boolean;
      'showPasswordToggle': boolean;
      'tooltip': string;
      'type': string;
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string | number;
    }
  }

  interface HTMLYooFormInputElement extends StencilComponents.YooFormInput, HTMLStencilElement {}

  var HTMLYooFormInputElement: {
    prototype: HTMLYooFormInputElement;
    new (): HTMLYooFormInputElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-input': HTMLYooFormInputElement;
  }
  interface ElementTagNameMap {
    'yoo-form-input': HTMLYooFormInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-input': JSXElements.YooFormInputAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormInputAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'borderColor'?: string;
      'iconPrefix'?: string;
      'iconSuffix'?: string;
      'onIconClicked'?: (event: CustomEvent<string>) => void;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'placeholder'?: string;
      'placeholdertolabel'?: boolean;
      'readonly'?: boolean;
      'required'?: boolean;
      'showInputClear'?: boolean;
      'showPasswordToggle'?: boolean;
      'tooltip'?: string;
      'type'?: string;
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string | number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormProgressIndicator {
      'currentStep': number;
      'isCompleted': boolean;
      'steps': string[];
    }
  }

  interface HTMLYooFormProgressIndicatorElement extends StencilComponents.YooFormProgressIndicator, HTMLStencilElement {}

  var HTMLYooFormProgressIndicatorElement: {
    prototype: HTMLYooFormProgressIndicatorElement;
    new (): HTMLYooFormProgressIndicatorElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-progress-indicator': HTMLYooFormProgressIndicatorElement;
  }
  interface ElementTagNameMap {
    'yoo-form-progress-indicator': HTMLYooFormProgressIndicatorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-progress-indicator': JSXElements.YooFormProgressIndicatorAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormProgressIndicatorAttributes extends HTMLAttributes {
      'currentStep'?: number;
      'isCompleted'?: boolean;
      'onStepSelected'?: (event: CustomEvent<string>) => void;
      'steps'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRadioGroup {
      'multipleSelection': boolean;
      'values': IRadioGroupEntry[];
    }
  }

  interface HTMLYooFormRadioGroupElement extends StencilComponents.YooFormRadioGroup, HTMLStencilElement {}

  var HTMLYooFormRadioGroupElement: {
    prototype: HTMLYooFormRadioGroupElement;
    new (): HTMLYooFormRadioGroupElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-radio-group': HTMLYooFormRadioGroupElement;
  }
  interface ElementTagNameMap {
    'yoo-form-radio-group': HTMLYooFormRadioGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-radio-group': JSXElements.YooFormRadioGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRadioGroupAttributes extends HTMLAttributes {
      'multipleSelection'?: boolean;
      'onSelectionChanged'?: (event: CustomEvent<Array<IRadioGroupEntry>>) => void;
      'values'?: IRadioGroupEntry[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRadio {
      'disabled': boolean;
      'state': string;
      'text': string;
    }
  }

  interface HTMLYooFormRadioElement extends StencilComponents.YooFormRadio, HTMLStencilElement {}

  var HTMLYooFormRadioElement: {
    prototype: HTMLYooFormRadioElement;
    new (): HTMLYooFormRadioElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-radio': HTMLYooFormRadioElement;
  }
  interface ElementTagNameMap {
    'yoo-form-radio': HTMLYooFormRadioElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-radio': JSXElements.YooFormRadioAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRadioAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'onRadioClicked'?: (event: CustomEvent) => void;
      'state'?: string;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRange {
      'asyncValidators': Array<AsyncValidator<IRangeValue>>;
      'double': boolean;
      'isValid': () => boolean;
      'max': number;
      'min': number;
      'readonly': boolean;
      'validators': Array<Validator<IRangeValue> | ValidatorEntry>;
      'value': IRangeValue;
    }
  }

  interface HTMLYooFormRangeElement extends StencilComponents.YooFormRange, HTMLStencilElement {}

  var HTMLYooFormRangeElement: {
    prototype: HTMLYooFormRangeElement;
    new (): HTMLYooFormRangeElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-range': HTMLYooFormRangeElement;
  }
  interface ElementTagNameMap {
    'yoo-form-range': HTMLYooFormRangeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-range': JSXElements.YooFormRangeAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRangeAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<IRangeValue>>;
      'double'?: boolean;
      'max'?: number;
      'min'?: number;
      'onIconClicked'?: (event: CustomEvent<string>) => void;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'validators'?: Array<Validator<IRangeValue> | ValidatorEntry>;
      'value'?: IRangeValue;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRanking {
      'values': IItemRanking[];
    }
  }

  interface HTMLYooFormRankingElement extends StencilComponents.YooFormRanking, HTMLStencilElement {}

  var HTMLYooFormRankingElement: {
    prototype: HTMLYooFormRankingElement;
    new (): HTMLYooFormRankingElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-ranking': HTMLYooFormRankingElement;
  }
  interface ElementTagNameMap {
    'yoo-form-ranking': HTMLYooFormRankingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-ranking': JSXElements.YooFormRankingAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRankingAttributes extends HTMLAttributes {
      'onChanged'?: (event: CustomEvent<IItemRanking[]>) => void;
      'values'?: IItemRanking[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormRecapStep {
      'mainTitle': string;
      'stepNumber': number;
      'subTitle': string;
      'validity': boolean;
    }
  }

  interface HTMLYooFormRecapStepElement extends StencilComponents.YooFormRecapStep, HTMLStencilElement {}

  var HTMLYooFormRecapStepElement: {
    prototype: HTMLYooFormRecapStepElement;
    new (): HTMLYooFormRecapStepElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-recap-step': HTMLYooFormRecapStepElement;
  }
  interface ElementTagNameMap {
    'yoo-form-recap-step': HTMLYooFormRecapStepElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-recap-step': JSXElements.YooFormRecapStepAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormRecapStepAttributes extends HTMLAttributes {
      'mainTitle'?: string;
      'stepNumber'?: number;
      'subTitle'?: string;
      'validity'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormSignaturePad {
      'asyncValidators': Array<AsyncValidator<string>>;
      'readonly': boolean;
      'required': boolean;
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string;
    }
  }

  interface HTMLYooFormSignaturePadElement extends StencilComponents.YooFormSignaturePad, HTMLStencilElement {}

  var HTMLYooFormSignaturePadElement: {
    prototype: HTMLYooFormSignaturePadElement;
    new (): HTMLYooFormSignaturePadElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-signature-pad': HTMLYooFormSignaturePadElement;
  }
  interface ElementTagNameMap {
    'yoo-form-signature-pad': HTMLYooFormSignaturePadElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-signature-pad': JSXElements.YooFormSignaturePadAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormSignaturePadAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'required'?: boolean;
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormSlider {
      'disabled': boolean;
      'doubleSlider': boolean;
      'hideLabel': boolean;
      'hideReferences': boolean;
      'initialLowValue': number;
      'initialValue': number;
      'maximum': number;
      'minimum': number;
      'triangleColor': string;
    }
  }

  interface HTMLYooFormSliderElement extends StencilComponents.YooFormSlider, HTMLStencilElement {}

  var HTMLYooFormSliderElement: {
    prototype: HTMLYooFormSliderElement;
    new (): HTMLYooFormSliderElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-slider': HTMLYooFormSliderElement;
  }
  interface ElementTagNameMap {
    'yoo-form-slider': HTMLYooFormSliderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-slider': JSXElements.YooFormSliderAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormSliderAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'doubleSlider'?: boolean;
      'hideLabel'?: boolean;
      'hideReferences'?: boolean;
      'initialLowValue'?: number;
      'initialValue'?: number;
      'maximum'?: number;
      'minimum'?: number;
      'onDoubleSliderChanged'?: (event: CustomEvent<{ lowValue: number, highValue: number }>) => void;
      'onSingleSliderChanged'?: (event: CustomEvent<number>) => void;
      'triangleColor'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormStarRating {
      'asyncValidators': Array<AsyncValidator<number>>;
      'readonly': boolean;
      'stars': number;
      'type': FormStarType;
      'validators': Array<Validator<number> | ValidatorEntry>;
      'value': number;
    }
  }

  interface HTMLYooFormStarRatingElement extends StencilComponents.YooFormStarRating, HTMLStencilElement {}

  var HTMLYooFormStarRatingElement: {
    prototype: HTMLYooFormStarRatingElement;
    new (): HTMLYooFormStarRatingElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-star-rating': HTMLYooFormStarRatingElement;
  }
  interface ElementTagNameMap {
    'yoo-form-star-rating': HTMLYooFormStarRatingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-star-rating': JSXElements.YooFormStarRatingAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormStarRatingAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<number>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'stars'?: number;
      'type'?: FormStarType;
      'validators'?: Array<Validator<number> | ValidatorEntry>;
      'value'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormTextArea {
      'asyncValidators': Array<AsyncValidator<string>>;
      'isValid': () => boolean;
      'placeholder': string;
      'readonly': boolean;
      'resizable': 'both' | 'vertical' | 'horizontal' | 'none';
      'validators': Array<Validator<string> | ValidatorEntry>;
      'value': string;
    }
  }

  interface HTMLYooFormTextAreaElement extends StencilComponents.YooFormTextArea, HTMLStencilElement {}

  var HTMLYooFormTextAreaElement: {
    prototype: HTMLYooFormTextAreaElement;
    new (): HTMLYooFormTextAreaElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-text-area': HTMLYooFormTextAreaElement;
  }
  interface ElementTagNameMap {
    'yoo-form-text-area': HTMLYooFormTextAreaElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-text-area': JSXElements.YooFormTextAreaAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormTextAreaAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<string>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'placeholder'?: string;
      'readonly'?: boolean;
      'resizable'?: 'both' | 'vertical' | 'horizontal' | 'none';
      'validators'?: Array<Validator<string> | ValidatorEntry>;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormTextEditor {

    }
  }

  interface HTMLYooFormTextEditorElement extends StencilComponents.YooFormTextEditor, HTMLStencilElement {}

  var HTMLYooFormTextEditorElement: {
    prototype: HTMLYooFormTextEditorElement;
    new (): HTMLYooFormTextEditorElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-text-editor': HTMLYooFormTextEditorElement;
  }
  interface ElementTagNameMap {
    'yoo-form-text-editor': HTMLYooFormTextEditorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-text-editor': JSXElements.YooFormTextEditorAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormTextEditorAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormTimer {
      'timeChanged': (event: any, position: string) => void;
    }
  }

  interface HTMLYooFormTimerElement extends StencilComponents.YooFormTimer, HTMLStencilElement {}

  var HTMLYooFormTimerElement: {
    prototype: HTMLYooFormTimerElement;
    new (): HTMLYooFormTimerElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-timer': HTMLYooFormTimerElement;
  }
  interface ElementTagNameMap {
    'yoo-form-timer': HTMLYooFormTimerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-timer': JSXElements.YooFormTimerAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormTimerAttributes extends HTMLAttributes {
      'onTimeCalculated'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooFormToggle {
      'asyncValidators': Array<AsyncValidator<boolean>>;
      'readonly': boolean;
      'text': string;
      'type': FormToogleType;
      'validators': Array<Validator<boolean> | ValidatorEntry>;
      'value': boolean;
    }
  }

  interface HTMLYooFormToggleElement extends StencilComponents.YooFormToggle, HTMLStencilElement {}

  var HTMLYooFormToggleElement: {
    prototype: HTMLYooFormToggleElement;
    new (): HTMLYooFormToggleElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-form-toggle': HTMLYooFormToggleElement;
  }
  interface ElementTagNameMap {
    'yoo-form-toggle': HTMLYooFormToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-form-toggle': JSXElements.YooFormToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface YooFormToggleAttributes extends HTMLAttributes {
      'asyncValidators'?: Array<AsyncValidator<boolean>>;
      'onInputBlurred'?: (event: CustomEvent<any>) => void;
      'onInputChanged'?: (event: CustomEvent<any>) => void;
      'onInputFocused'?: (event: CustomEvent<boolean>) => void;
      'onValidityChanged'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'text'?: string;
      'type'?: FormToogleType;
      'validators'?: Array<Validator<boolean> | ValidatorEntry>;
      'value'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface YooPhotoEditor {
      'readonly': boolean;
      'src': string;
    }
  }

  interface HTMLYooPhotoEditorElement extends StencilComponents.YooPhotoEditor, HTMLStencilElement {}

  var HTMLYooPhotoEditorElement: {
    prototype: HTMLYooPhotoEditorElement;
    new (): HTMLYooPhotoEditorElement;
  };
  interface HTMLElementTagNameMap {
    'yoo-photo-editor': HTMLYooPhotoEditorElement;
  }
  interface ElementTagNameMap {
    'yoo-photo-editor': HTMLYooPhotoEditorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'yoo-photo-editor': JSXElements.YooPhotoEditorAttributes;
    }
  }
  namespace JSXElements {
    export interface YooPhotoEditorAttributes extends HTMLAttributes {
      'onImageClicked'?: (event: CustomEvent<boolean>) => void;
      'readonly'?: boolean;
      'src'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;